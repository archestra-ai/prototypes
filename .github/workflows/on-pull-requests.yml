name: On Pull Requests

on:
  pull_request:
    types:
      - opened
      - edited
      - synchronize
  # You can use the merge_group event to trigger your GitHub Actions workflow when
  # a pull request is added to a merge queue
  # https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue#triggering-merge-group-checks-with-github-actions
  merge_group:

concurrency:
  # Cancel any running workflow for the same branch when new commits are pushed.
  # We group both by ref_name (available when CI is triggered by a push to a branch/tag)
  # and head_ref (available when CI is triggered by a PR).
  group: "on-pull-requests-${{ github.ref_name }}-${{ github.head_ref }}"
  cancel-in-progress: true

jobs:
  linting-and-tests:
    name: Linting and Tests
    permissions:
      contents: read
      security-events: write
      id-token: write # Required for Workload Identity Federation
    uses: ./.github/workflows/linting-and-tests.yml

  # TODO: remove when done testing...
  build-desktop-application:
    name: Build desktop application (${{ matrix.os }}-${{ matrix.arch }})
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        # https://docs.github.com/en/actions/how-tos/write-workflows/choose-where-workflows-run/choose-the-runner-for-a-job#standard-github-hosted-runners-for-public-repositories
        include:
          - platform: macos-latest
            os: macos
            arch: arm64
          - platform: macos-latest
            os: macos
            arch: x64
          - platform: windows-11-arm
            os: windows
            arch: arm64
          - platform: windows-latest
            os: windows
            arch: x64
          - platform: ubuntu-latest
            os: linux
            arch: x64
          - platform: ubuntu-24.04-arm
            os: linux
            arch: arm64
    defaults:
      run:
        working-directory: desktop_app
    steps:
      - name: Checkout project
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Generate a token
        id: generate-token
        uses: ./.github/actions/generate-release-token
        with:
          app-id: ${{ secrets.ARCHESTRA_RELEASER_GITHUB_APP_ID }}
          private-key: ${{ secrets.ARCHESTRA_RELEASER_GITHUB_APP_PRIVATE_KEY }}

      - name: Setup environment
        uses: ./.github/actions/setup-env

      # See https://brunoscheufler.com/blog/2023-11-12-setting-up-hosted-macos-github-actions-workflows-for-electron-builds
      # was super helpful for getting macOS signing working on GitHub Actions
      - name: Install Apple codesigning certificate
        if: matrix.os == 'macos'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_SIGNING_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPLE_SIGNING_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Build desktop application
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: pnpm publish ${{ matrix.args }}
