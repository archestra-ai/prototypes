name: Deploy OAuth Proxy Server to Cloud Run

on:
  workflow_call:
    inputs:
      environment:
        description: "The environment to deploy to (dev or prod)"
        required: true
        type: string
      version:
        description: "The version to deploy (commit SHA for dev, release version for prod)"
        required: true
        type: string
    secrets:
      GCP_PROJECT_ID:
        required: true
      GCP_SA_KEY:
        required: true
      GOOGLE_CLIENT_ID:
        required: true
      GOOGLE_CLIENT_SECRET:
        required: true

jobs:
  deploy:
    name: Deploy to Cloud Run (${{ inputs.environment }})
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Set environment-specific variables
        id: env-vars
        env:
          ENVIRONMENT: ${{ inputs.environment }}
        run: |
          if [ "$ENVIRONMENT" == "prod" ]; then
            echo "service_name=oauth-proxy" >> $GITHUB_OUTPUT
            echo "region=us-central1" >> $GITHUB_OUTPUT
            echo "memory=512Mi" >> $GITHUB_OUTPUT
            echo "cpu=1" >> $GITHUB_OUTPUT
            echo "min_instances=1" >> $GITHUB_OUTPUT
            echo "max_instances=100" >> $GITHUB_OUTPUT
            echo "redirect_url=https://oauth.archestra.ai" >> $GITHUB_OUTPUT
          else
            echo "service_name=oauth-proxy-dev" >> $GITHUB_OUTPUT
            echo "region=us-central1" >> $GITHUB_OUTPUT
            echo "memory=256Mi" >> $GITHUB_OUTPUT
            echo "cpu=1" >> $GITHUB_OUTPUT
            echo "min_instances=0" >> $GITHUB_OUTPUT
            echo "max_instances=10" >> $GITHUB_OUTPUT
            echo "redirect_url=https://oauth.dev.archestra.ai" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image to GCR
        uses: RafikFarhad/push-to-gcr-github-action@241707854fb71f655ec4e2a98bb16505f218bcc2 # v4.1.0
        with:
          registry: gcr.io
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          image_name: ${{ steps.env-vars.outputs.service_name }}
          image_tag: ${{ inputs.version }}
          dockerfile: ./oauth-proxy/Dockerfile
          context: .
          gcloud_service_key: ${{ secrets.GCP_SA_KEY }}

      - name: Set image output
        id: docker-build
        env:
          PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          SERVICE_NAME: ${{ steps.env-vars.outputs.service_name }}
          VERSION: ${{ inputs.version }}
        run: |
          echo "image=gcr.io/${PROJECT_ID}/${SERVICE_NAME}:${VERSION}" >> $GITHUB_OUTPUT

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@140bb5113ffb6b65a7e9b937a81fa96cf5064462 # v2.1.11
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@6a7c903a70c8625ed6700fa299f5ddb4ca6022e9 # v2.1.5

      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@147732842f8a61ce9bd3b3f8e9f6597fe991ad65 # v2.7.4
        with:
          service: ${{ steps.env-vars.outputs.service_name }}
          image: ${{ steps.docker-build.outputs.image }}
          region: ${{ steps.env-vars.outputs.region }}
          flags: |
            --allow-unauthenticated
            --memory=${{ steps.env-vars.outputs.memory }}
            --cpu=${{ steps.env-vars.outputs.cpu }}
            --min-instances=${{ steps.env-vars.outputs.min_instances }}
            --max-instances=${{ steps.env-vars.outputs.max_instances }}
            --port=3000
          env_vars: |
            NODE_ENV=${{ inputs.environment }}
            PORT=3000
            REDIRECT_URL=${{ steps.env-vars.outputs.redirect_url }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            LOG_LEVEL=info

      - name: Get service URL
        id: service-url
        env:
          SERVICE_NAME: ${{ steps.env-vars.outputs.service_name }}
          REGION: ${{ steps.env-vars.outputs.region }}
        run: |
          SERVICE_URL=$(gcloud run services describe "$SERVICE_NAME" \
            --platform managed \
            --region "$REGION" \
            --format 'value(status.url)')
          echo "Service deployed to: $SERVICE_URL"
          echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT

      - name: Verify deployment
        env:
          SERVICE_URL: ${{ steps.service-url.outputs.service_url }}
        run: |
          # Wait for service to be ready
          sleep 10

          # Check health endpoint
          curl -f "${SERVICE_URL}/health" || exit 1
          echo "Health check passed!"
