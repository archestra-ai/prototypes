name: Release Please

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  # Cancel any running workflow for the same branch when new commits are pushed.
  # We group both by ref_name (available when CI is triggered by a push to a branch/tag)
  # and head_ref (available when CI is triggered by a PR).
  group: "${{ github.ref_name }}-${{ github.head_ref }}"
  cancel-in-progress: true

jobs:
  release-please:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
    outputs:
      desktop_release_created: ${{ steps.release-please.outputs['desktop--release_created'] }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          persist-credentials: false

      - uses: googleapis/release-please-action@a02a34c4d625f9be7cb89156071d8567266a2445 # v4.2.0
        id: release-please
        with:
          config-file: .github/release-please/release-please-config.json
          manifest-file: .github/release-please/.release-please-manifest.json
          target-branch: main

      - name: Log release-please outputs
        # HACK to get toJson to sorta print the output to the console without failing this job
        continue-on-error: true
        env:
          OUTPUTS: ${{ toJson(steps.release-please.outputs) }}
        run: |
          echo "$OUTPUTS"

  build-desktop-application-and-create-github-release:
    name: Build desktop application and create GitHub release
    runs-on: ${{ matrix.platform }}
    # if: needs.release-please.outputs.desktop_release_created
    needs:
      - release-please
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: ubuntu-latest
            args: ""
          - platform: windows-latest
            args: ""
    steps:
      - name: Checkout project
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
          
      - name: Generate a token
        id: generate-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.ARCHESTRA_RELEASER_GITHUB_APP_ID }}
          private-key: ${{ secrets.ARCHESTRA_RELEASER_GITHUB_APP_PRIVATE_KEY }}

      - name: Update version from release-please tag
        if: needs.release-please.outputs.desktop_release_created
        env:
          TAG_NAME: ${{ needs.release-please.outputs['desktop--tag_name'] }}
        run: |
          VERSION="${TAG_NAME#app-v}"
          echo "Updating version to $VERSION from tag $TAG_NAME"
          
          # Update package.json
          jq --arg version "$VERSION" '.version = $version' desktop/package.json > desktop/package.json.tmp && mv desktop/package.json.tmp desktop/package.json
          
          # Update Cargo.toml
          sed -i.bak "s/^version = .*/version = \"$VERSION\"/" desktop/src-tauri/Cargo.toml && rm desktop/src-tauri/Cargo.toml.bak
          
          # Update tauri.conf.json
          jq --arg version "$VERSION" '.version = $version' desktop/src-tauri/tauri.conf.json > desktop/src-tauri/tauri.conf.json.tmp && mv desktop/src-tauri/tauri.conf.json.tmp desktop/src-tauri/tauri.conf.json

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: true

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          platform: ${{ matrix.platform }}

      - uses: tauri-apps/tauri-action@564aea5a8075c7a54c167bb0cf5b3255314a7f9d # v0.5.22
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          projectPath: desktop
          releaseName: "App v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

      - run: |
          echo "placeholder to build and publish desktop application"
