// this file contains a test harness that was auto-generated by fastify-openapi-glue
// running the tests directly after generation will probably fail as the parameters
// need to be manually added.


import { test } from "node:test";
import Fastify from "fastify";
import fastifyPlugin from "../index.js";
import service from "../service.js";

const specification = "../openApi.json";

const opts = {
	specification,
	service,
};
//
// Operation: get_all_chats
// URL: /api/chat
// summary:	undefined
// valid responses
//   '200':
//     description: List all chats
//     content:
//       application/json:
//         schema:
//           type: array
//           items:
//             type: object
//             required:
//               - id
//               - session_id
//               - title
//               - llm_provider
//               - created_at
//               - messages
//             properties:
//               created_at:
//                 type: string
//                 format: date-time
//               id:
//                 type: integer
//                 format: int32
//               llm_provider:
//                 type: string
//               messages:
//                 type: array
//                 items:
//                   type: object
//                   required:
//                     - role
//                     - content
//                     - thinking
//                     - tool_calls
//                     - images
//                   properties:
//                     content:
//                       type: string
//                     images:
//                       type: array
//                       items:
//                         type: string
//                     role:
//                       type: string
//                       enum:
//                         - user
//                         - assistant
//                         - tool
//                         - system
//                         - unknown
//                     thinking:
//                       type: string
//                     tool_calls:
//                       type: array
//                       items:
//                         type: object
//                         required:
//                           - function
//                         properties:
//                           function:
//                             type: object
//                             required:
//                               - name
//                               - arguments
//                             properties:
//                               arguments: {}
//                               name:
//                                 type: string
//               session_id:
//                 type: string
//               title:
//                 type: string
//   '500':
//     description: Internal server error
//

test("testing get_all_chats", async (t) => {
	const fastify = Fastify();
	fastify.register(fastifyPlugin, opts);

	const res = await fastify.inject({
		method: "GET",
		url: "/api/chat",
		payload: undefined,
		headers: undefined,
	});
	t.assert.equal(res.statusCode, 200);
});

// Operation: create_chat
// URL: /api/chat
// summary:	undefined
// req.body
//   content:
//     application/json:
//       schema:
//         type: object
//         required:
//           - llm_provider
//         properties:
//           llm_provider:
//             type: string
//
// valid responses
//   '201':
//     description: Chat created successfully
//     content:
//       application/json:
//         schema:
//           type: object
//           required:
//             - id
//             - session_id
//             - title
//             - llm_provider
//             - created_at
//             - messages
//           properties:
//             created_at:
//               type: string
//               format: date-time
//             id:
//               type: integer
//               format: int32
//             llm_provider:
//               type: string
//             messages:
//               type: array
//               items:
//                 type: object
//                 required:
//                   - role
//                   - content
//                   - thinking
//                   - tool_calls
//                   - images
//                 properties:
//                   content:
//                     type: string
//                   images:
//                     type: array
//                     items:
//                       type: string
//                   role:
//                     type: string
//                     enum:
//                       - user
//                       - assistant
//                       - tool
//                       - system
//                       - unknown
//                   thinking:
//                     type: string
//                   tool_calls:
//                     type: array
//                     items:
//                       type: object
//                       required:
//                         - function
//                       properties:
//                         function:
//                           type: object
//                           required:
//                             - name
//                             - arguments
//                           properties:
//                             arguments: {}
//                             name:
//                               type: string
//             session_id:
//               type: string
//             title:
//               type: string
//   '500':
//     description: Internal server error
//

test("testing create_chat", async (t) => {
	const fastify = Fastify();
	fastify.register(fastifyPlugin, opts);

	const res = await fastify.inject({
		method: "POST",
		url: "/api/chat",
		payload: undefined, //insert body data here!!
		headers: undefined,
	});
	t.assert.equal(res.statusCode, 200);
});

// Operation: delete_chat
// URL: /api/chat/:id
// summary:	undefined
// req.params
//   type: object
//   properties:
//     id:
//       type: string
//       description: Chat ID
//   required:
//     - id
//
// valid responses
//   '204':
//     description: Chat deleted successfully
//   '500':
//     description: Internal server error
//

test("testing delete_chat", async (t) => {
	const fastify = Fastify();
	fastify.register(fastifyPlugin, opts);

	const res = await fastify.inject({
		method: "DELETE",
		url: "/api/chat/:id",
		payload: undefined,
		headers: undefined,
	});
	t.assert.equal(res.statusCode, 200);
});

// Operation: update_chat
// URL: /api/chat/:id
// summary:	undefined
// req.params
//   type: object
//   properties:
//     id:
//       type: string
//       description: Chat ID
//   required:
//     - id
//
// req.body
//   content:
//     application/json:
//       schema:
//         type: object
//         properties:
//           title:
//             type:
//               - string
//               - 'null'
//
// valid responses
//   '200':
//     description: Chat updated successfully
//     content:
//       application/json:
//         schema:
//           type: object
//           required:
//             - id
//             - session_id
//             - title
//             - llm_provider
//             - created_at
//             - messages
//           properties:
//             created_at:
//               type: string
//               format: date-time
//             id:
//               type: integer
//               format: int32
//             llm_provider:
//               type: string
//             messages:
//               type: array
//               items:
//                 type: object
//                 required:
//                   - role
//                   - content
//                   - thinking
//                   - tool_calls
//                   - images
//                 properties:
//                   content:
//                     type: string
//                   images:
//                     type: array
//                     items:
//                       type: string
//                   role:
//                     type: string
//                     enum:
//                       - user
//                       - assistant
//                       - tool
//                       - system
//                       - unknown
//                   thinking:
//                     type: string
//                   tool_calls:
//                     type: array
//                     items:
//                       type: object
//                       required:
//                         - function
//                       properties:
//                         function:
//                           type: object
//                           required:
//                             - name
//                             - arguments
//                           properties:
//                             arguments: {}
//                             name:
//                               type: string
//             session_id:
//               type: string
//             title:
//               type: string
//   '404':
//     description: Chat not found
//   '500':
//     description: Internal server error
//

test("testing update_chat", async (t) => {
	const fastify = Fastify();
	fastify.register(fastifyPlugin, opts);

	const res = await fastify.inject({
		method: "PATCH",
		url: "/api/chat/:id",
		payload: undefined, //insert body data here!!
		headers: undefined,
	});
	t.assert.equal(res.statusCode, 200);
});

// Operation: get_connected_external_mcp_clients
// URL: /api/external_mcp_client
// summary:	undefined
// valid responses
//   '200':
//     description: List of connected external MCP clients
//     content:
//       application/json:
//         schema:
//           type: array
//           items:
//             type: object
//             required:
//               - client_name
//               - created_at
//               - updated_at
//             properties:
//               client_name:
//                 type: string
//               created_at:
//                 type: string
//                 format: date-time
//               updated_at:
//                 type: string
//                 format: date-time
//   '500':
//     description: Internal server error
//

test("testing get_connected_external_mcp_clients", async (t) => {
	const fastify = Fastify();
	fastify.register(fastifyPlugin, opts);

	const res = await fastify.inject({
		method: "GET",
		url: "/api/external_mcp_client",
		payload: undefined,
		headers: undefined,
	});
	t.assert.equal(res.statusCode, 200);
});

// Operation: connect_external_mcp_client
// URL: /api/external_mcp_client/connect
// summary:	undefined
// req.body
//   content:
//     application/json:
//       schema:
//         type: object
//         required:
//           - client_name
//         properties:
//           client_name:
//             type: string
//
// valid responses
//   '200':
//     description: External MCP client connected successfully
//   '500':
//     description: Internal server error
//

test("testing connect_external_mcp_client", async (t) => {
	const fastify = Fastify();
	fastify.register(fastifyPlugin, opts);

	const res = await fastify.inject({
		method: "POST",
		url: "/api/external_mcp_client/connect",
		payload: undefined, //insert body data here!!
		headers: undefined,
	});
	t.assert.equal(res.statusCode, 200);
});

// Operation: get_supported_external_mcp_clients
// URL: /api/external_mcp_client/supported
// summary:	undefined
// valid responses
//   '200':
//     description: List of supported external MCP client names
//     content:
//       application/json:
//         schema:
//           type: array
//           items:
//             type: string
//   '500':
//     description: Internal server error
//

test("testing get_supported_external_mcp_clients", async (t) => {
	const fastify = Fastify();
	fastify.register(fastifyPlugin, opts);

	const res = await fastify.inject({
		method: "GET",
		url: "/api/external_mcp_client/supported",
		payload: undefined,
		headers: undefined,
	});
	t.assert.equal(res.statusCode, 200);
});

// Operation: disconnect_external_mcp_client
// URL: /api/external_mcp_client/:client_name/disconnect
// summary:	undefined
// req.params
//   type: object
//   properties:
//     client_name:
//       type: string
//       description: Name of the external MCP client to disconnect
//   required:
//     - client_name
//
// valid responses
//   '200':
//     description: External MCP client disconnected successfully
//   '500':
//     description: Internal server error
//

test("testing disconnect_external_mcp_client", async (t) => {
	const fastify = Fastify();
	fastify.register(fastifyPlugin, opts);

	const res = await fastify.inject({
		method: "DELETE",
		url: "/api/external_mcp_client/:client_name/disconnect",
		payload: undefined,
		headers: undefined,
	});
	t.assert.equal(res.statusCode, 200);
});

// Operation: get_mcp_request_logs
// URL: /api/mcp_request_log
// summary:	undefined
// req.query
//   type: object
//   properties:
//     server_name:
//       type:
//         - string
//         - 'null'
//     session_id:
//       type:
//         - string
//         - 'null'
//     mcp_session_id:
//       type:
//         - string
//         - 'null'
//     status_code:
//       type:
//         - integer
//         - 'null'
//       format: int32
//     method:
//       type:
//         - string
//         - 'null'
//     start_time:
//       type:
//         - string
//         - 'null'
//     end_time:
//       type:
//         - string
//         - 'null'
//     page:
//       type:
//         - integer
//         - 'null'
//       format: int64
//       minimum: 0
//     page_size:
//       type:
//         - integer
//         - 'null'
//       format: int64
//       minimum: 0
//
// valid responses
//   '200':
//     description: Paginated list of MCP request logs
//     content:
//       application/json:
//         schema:
//           type: object
//           required:
//             - data
//             - total
//             - page
//             - page_size
//           properties:
//             data:
//               type: array
//               items:
//                 type: object
//                 required:
//                   - id
//                   - request_id
//                   - server_name
//                   - status_code
//                   - timestamp
//                 properties:
//                   client_info:
//                     type:
//                       - string
//                       - 'null'
//                   duration_ms:
//                     type:
//                       - integer
//                       - 'null'
//                     format: int32
//                   error_message:
//                     type:
//                       - string
//                       - 'null'
//                   id:
//                     type: integer
//                     format: int32
//                   mcp_session_id:
//                     type:
//                       - string
//                       - 'null'
//                   method:
//                     type:
//                       - string
//                       - 'null'
//                   request_body:
//                     type:
//                       - string
//                       - 'null'
//                   request_headers:
//                     type:
//                       - string
//                       - 'null'
//                   request_id:
//                     type: string
//                   response_body:
//                     type:
//                       - string
//                       - 'null'
//                   response_headers:
//                     type:
//                       - string
//                       - 'null'
//                   server_name:
//                     type: string
//                   session_id:
//                     type:
//                       - string
//                       - 'null'
//                   status_code:
//                     type: integer
//                     format: int32
//                   timestamp:
//                     type: string
//                     format: date-time
//             page:
//               type: integer
//               format: int64
//               minimum: 0
//             page_size:
//               type: integer
//               format: int64
//               minimum: 0
//             total:
//               type: integer
//               format: int64
//               minimum: 0
//   '500':
//     description: Internal server error
//

test("testing get_mcp_request_logs", async (t) => {
	const fastify = Fastify();
	fastify.register(fastifyPlugin, opts);

	const res = await fastify.inject({
		method: "GET",
		url: "/api/mcp_request_log",
		payload: undefined,
		headers: undefined,
	});
	t.assert.equal(res.statusCode, 200);
});

// Operation: clear_mcp_request_logs
// URL: /api/mcp_request_log
// summary:	undefined
// req.query
//   type: object
//   properties:
//     clear_all:
//       type:
//         - boolean
//         - 'null'
//
// valid responses
//   '200':
//     description: Number of deleted log entries
//     content:
//       text/plain:
//         schema:
//           type: integer
//           format: int64
//           minimum: 0
//   '500':
//     description: Internal server error
//

test("testing clear_mcp_request_logs", async (t) => {
	const fastify = Fastify();
	fastify.register(fastifyPlugin, opts);

	const res = await fastify.inject({
		method: "DELETE",
		url: "/api/mcp_request_log",
		payload: undefined,
		headers: undefined,
	});
	t.assert.equal(res.statusCode, 200);
});

// Operation: get_mcp_request_log_stats
// URL: /api/mcp_request_log/stats
// summary:	undefined
// req.query
//   type: object
//   properties:
//     server_name:
//       type:
//         - string
//         - 'null'
//     session_id:
//       type:
//         - string
//         - 'null'
//     mcp_session_id:
//       type:
//         - string
//         - 'null'
//     status_code:
//       type:
//         - integer
//         - 'null'
//       format: int32
//     method:
//       type:
//         - string
//         - 'null'
//     start_time:
//       type:
//         - string
//         - 'null'
//     end_time:
//       type:
//         - string
//         - 'null'
//     page:
//       type:
//         - integer
//         - 'null'
//       format: int64
//       minimum: 0
//     page_size:
//       type:
//         - integer
//         - 'null'
//       format: int64
//       minimum: 0
//
// valid responses
//   '200':
//     description: Request log statistics
//     content:
//       application/json:
//         schema:
//           type: object
//           required:
//             - total_requests
//             - success_count
//             - error_count
//             - avg_duration_ms
//             - requests_per_server
//           properties:
//             avg_duration_ms:
//               type: number
//               format: double
//             error_count:
//               type: integer
//               format: int64
//               minimum: 0
//             requests_per_server:
//               type: object
//               additionalProperties:
//                 type: integer
//                 format: int64
//                 minimum: 0
//               propertyNames:
//                 type: string
//             success_count:
//               type: integer
//               format: int64
//               minimum: 0
//             total_requests:
//               type: integer
//               format: int64
//               minimum: 0
//   '500':
//     description: Internal server error
//

test("testing get_mcp_request_log_stats", async (t) => {
	const fastify = Fastify();
	fastify.register(fastifyPlugin, opts);

	const res = await fastify.inject({
		method: "GET",
		url: "/api/mcp_request_log/stats",
		payload: undefined,
		headers: undefined,
	});
	t.assert.equal(res.statusCode, 200);
});

// Operation: get_mcp_request_log_by_id
// URL: /api/mcp_request_log/:request_id
// summary:	undefined
// req.params
//   type: object
//   properties:
//     request_id:
//       type: string
//       description: Request ID to fetch
//   required:
//     - request_id
//
// valid responses
//   '200':
//     description: MCP request log if found
//     content:
//       application/json:
//         schema:
//           oneOf:
//             - type: 'null'
//             - type: object
//               required:
//                 - id
//                 - request_id
//                 - server_name
//                 - status_code
//                 - timestamp
//               properties:
//                 client_info:
//                   type:
//                     - string
//                     - 'null'
//                 duration_ms:
//                   type:
//                     - integer
//                     - 'null'
//                   format: int32
//                 error_message:
//                   type:
//                     - string
//                     - 'null'
//                 id:
//                   type: integer
//                   format: int32
//                 mcp_session_id:
//                   type:
//                     - string
//                     - 'null'
//                 method:
//                   type:
//                     - string
//                     - 'null'
//                 request_body:
//                   type:
//                     - string
//                     - 'null'
//                 request_headers:
//                   type:
//                     - string
//                     - 'null'
//                 request_id:
//                   type: string
//                 response_body:
//                   type:
//                     - string
//                     - 'null'
//                 response_headers:
//                   type:
//                     - string
//                     - 'null'
//                 server_name:
//                   type: string
//                 session_id:
//                   type:
//                     - string
//                     - 'null'
//                 status_code:
//                   type: integer
//                   format: int32
//                 timestamp:
//                   type: string
//                   format: date-time
//   '400':
//     description: Invalid request ID format
//   '500':
//     description: Internal server error
//

test("testing get_mcp_request_log_by_id", async (t) => {
	const fastify = Fastify();
	fastify.register(fastifyPlugin, opts);

	const res = await fastify.inject({
		method: "GET",
		url: "/api/mcp_request_log/:request_id",
		payload: undefined,
		headers: undefined,
	});
	t.assert.equal(res.statusCode, 200);
});

// Operation: get_installed_mcp_servers
// URL: /api/mcp_server
// summary:	undefined
// valid responses
//   '200':
//     description: List of installed MCP servers
//     content:
//       application/json:
//         schema:
//           type: array
//           items:
//             type: object
//             required:
//               - id
//               - name
//               - server_config
//               - created_at
//             properties:
//               created_at:
//                 type: string
//                 format: date-time
//               id:
//                 type: integer
//                 format: int32
//               name:
//                 type: string
//               server_config:
//                 type: object
//                 required:
//                   - transport
//                   - command
//                   - args
//                   - env
//                 properties:
//                   args:
//                     type: array
//                     items:
//                       type: string
//                   command:
//                     type: string
//                   env:
//                     type: object
//                     additionalProperties:
//                       type: string
//                     propertyNames:
//                       type: string
//                   transport:
//                     type: string
//   '500':
//     description: Internal server error
//

test("testing get_installed_mcp_servers", async (t) => {
	const fastify = Fastify();
	fastify.register(fastifyPlugin, opts);

	const res = await fastify.inject({
		method: "GET",
		url: "/api/mcp_server",
		payload: undefined,
		headers: undefined,
	});
	t.assert.equal(res.statusCode, 200);
});

// Operation: get_mcp_connector_catalog
// URL: /api/mcp_server/catalog
// summary:	undefined
// valid responses
//   '200':
//     description: MCP connector catalog
//     content:
//       application/json:
//         schema:
//           type: array
//           items:
//             type: object
//             required:
//               - id
//               - title
//               - description
//               - category
//               - tags
//               - author
//               - version
//               - homepage
//               - repository
//               - server_config
//             properties:
//               author:
//                 type: string
//               category:
//                 type: string
//               description:
//                 type: string
//               homepage:
//                 type: string
//               id:
//                 type: string
//               image:
//                 type:
//                   - string
//                   - 'null'
//               oauth:
//                 oneOf:
//                   - type: 'null'
//                   - type: object
//                     required:
//                       - provider
//                       - required
//                     properties:
//                       provider:
//                         type: string
//                       required:
//                         type: boolean
//               repository:
//                 type: string
//               server_config:
//                 type: object
//                 required:
//                   - transport
//                   - command
//                   - args
//                   - env
//                 properties:
//                   args:
//                     type: array
//                     items:
//                       type: string
//                   command:
//                     type: string
//                   env:
//                     type: object
//                     additionalProperties:
//                       type: string
//                     propertyNames:
//                       type: string
//                   transport:
//                     type: string
//               tags:
//                 type: array
//                 items:
//                   type: string
//               title:
//                 type: string
//               version:
//                 type: string
//   '500':
//     description: Internal server error
//

test("testing get_mcp_connector_catalog", async (t) => {
	const fastify = Fastify();
	fastify.register(fastifyPlugin, opts);

	const res = await fastify.inject({
		method: "GET",
		url: "/api/mcp_server/catalog",
		payload: undefined,
		headers: undefined,
	});
	t.assert.equal(res.statusCode, 200);
});

// Operation: install_mcp_server_from_catalog
// URL: /api/mcp_server/catalog/install
// summary:	undefined
// req.body
//   content:
//     application/json:
//       schema:
//         type: object
//         required:
//           - mcp_connector_id
//         properties:
//           mcp_connector_id:
//             type: string
//
// valid responses
//   '200':
//     description: MCP server installed successfully
//   '500':
//     description: Internal server error
//

test("testing install_mcp_server_from_catalog", async (t) => {
	const fastify = Fastify();
	fastify.register(fastifyPlugin, opts);

	const res = await fastify.inject({
		method: "POST",
		url: "/api/mcp_server/catalog/install",
		payload: undefined, //insert body data here!!
		headers: undefined,
	});
	t.assert.equal(res.statusCode, 200);
});

// Operation: start_mcp_server_oauth
// URL: /api/mcp_server/start_oauth
// summary:	undefined
// req.body
//   content:
//     application/json:
//       schema:
//         type: object
//         required:
//           - mcp_connector_id
//         properties:
//           mcp_connector_id:
//             type: string
//
// valid responses
//   '200':
//     description: OAuth authorization URL
//     content:
//       application/json:
//         schema:
//           type: object
//           required:
//             - auth_url
//           properties:
//             auth_url:
//               type: string
//   '500':
//     description: Internal server error
//

test("testing start_mcp_server_oauth", async (t) => {
	const fastify = Fastify();
	fastify.register(fastifyPlugin, opts);

	const res = await fastify.inject({
		method: "POST",
		url: "/api/mcp_server/start_oauth",
		payload: undefined, //insert body data here!!
		headers: undefined,
	});
	t.assert.equal(res.statusCode, 200);
});

// Operation: uninstall_mcp_server
// URL: /api/mcp_server/:mcp_server_name
// summary:	undefined
// req.params
//   type: object
//   properties:
//     mcp_server_name:
//       type: string
//       description: Name of the MCP server to uninstall
//   required:
//     - mcp_server_name
//
// valid responses
//   '200':
//     description: MCP server uninstalled successfully
//   '500':
//     description: Internal server error
//

test("testing uninstall_mcp_server", async (t) => {
	const fastify = Fastify();
	fastify.register(fastifyPlugin, opts);

	const res = await fastify.inject({
		method: "DELETE",
		url: "/api/mcp_server/:mcp_server_name",
		payload: undefined,
		headers: undefined,
	});
	t.assert.equal(res.statusCode, 200);
});
