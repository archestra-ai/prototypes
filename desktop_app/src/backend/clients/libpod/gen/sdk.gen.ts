// This file is auto-generated by @hey-api/openapi-ts
import type { Client, Options as ClientOptions, TDataShape } from './client';
import { client as _heyApiClient } from './client.gen';
import type {
  ContainerArchiveData,
  ContainerArchiveErrors,
  ContainerArchiveLibpodData,
  ContainerArchiveLibpodErrors,
  ContainerArchiveLibpodResponses,
  ContainerArchiveResponses,
  ContainerAttachData,
  ContainerAttachErrors,
  ContainerAttachLibpodData,
  ContainerAttachLibpodErrors,
  ContainerChangesLibpodData,
  ContainerChangesLibpodErrors,
  ContainerChangesLibpodResponses,
  ContainerCheckpointLibpodData,
  ContainerCheckpointLibpodErrors,
  ContainerCheckpointLibpodResponses,
  ContainerCreateData,
  ContainerCreateErrors,
  ContainerCreateLibpodData,
  ContainerCreateLibpodErrors,
  ContainerCreateLibpodResponses,
  ContainerCreateResponses,
  ContainerDeleteData,
  ContainerDeleteErrors,
  ContainerDeleteLibpodData,
  ContainerDeleteLibpodErrors,
  ContainerDeleteLibpodResponses,
  ContainerDeleteResponses,
  ContainerExecData,
  ContainerExecErrors,
  ContainerExecLibpodData,
  ContainerExecLibpodErrors,
  ContainerExecLibpodResponses,
  ContainerExecResponses,
  ContainerExistsLibpodData,
  ContainerExistsLibpodErrors,
  ContainerExistsLibpodResponses,
  ContainerExportData,
  ContainerExportErrors,
  ContainerExportLibpodData,
  ContainerExportLibpodErrors,
  ContainerExportLibpodResponses,
  ContainerExportResponses,
  ContainerHealthcheckLibpodData,
  ContainerHealthcheckLibpodErrors,
  ContainerHealthcheckLibpodResponses,
  ContainerInitLibpodData,
  ContainerInitLibpodErrors,
  ContainerInitLibpodResponses,
  ContainerInspectData,
  ContainerInspectErrors,
  ContainerInspectLibpodData,
  ContainerInspectLibpodErrors,
  ContainerInspectLibpodResponses,
  ContainerInspectResponses,
  ContainerKillData,
  ContainerKillErrors,
  ContainerKillLibpodData,
  ContainerKillLibpodErrors,
  ContainerKillLibpodResponses,
  ContainerKillResponses,
  ContainerListData,
  ContainerListErrors,
  ContainerListLibpodData,
  ContainerListLibpodErrors,
  ContainerListLibpodResponses,
  ContainerListResponses,
  ContainerLogsData,
  ContainerLogsErrors,
  ContainerLogsLibpodData,
  ContainerLogsLibpodErrors,
  ContainerLogsLibpodResponses,
  ContainerLogsResponses,
  ContainerMountLibpodData,
  ContainerMountLibpodErrors,
  ContainerMountLibpodResponses,
  ContainerPauseData,
  ContainerPauseErrors,
  ContainerPauseLibpodData,
  ContainerPauseLibpodErrors,
  ContainerPauseLibpodResponses,
  ContainerPauseResponses,
  ContainerPruneData,
  ContainerPruneErrors,
  ContainerPruneLibpodData,
  ContainerPruneLibpodErrors,
  ContainerPruneLibpodResponses,
  ContainerPruneResponses,
  ContainerRenameData,
  ContainerRenameErrors,
  ContainerRenameLibpodData,
  ContainerRenameLibpodErrors,
  ContainerRenameLibpodResponses,
  ContainerRenameResponses,
  ContainerResizeData,
  ContainerResizeErrors,
  ContainerResizeLibpodData,
  ContainerResizeLibpodErrors,
  ContainerResizeLibpodResponses,
  ContainerResizeResponses,
  ContainerRestartData,
  ContainerRestartErrors,
  ContainerRestartLibpodData,
  ContainerRestartLibpodErrors,
  ContainerRestartLibpodResponses,
  ContainerRestartResponses,
  ContainerRestoreLibpodData,
  ContainerRestoreLibpodErrors,
  ContainerRestoreLibpodResponses,
  ContainerShowMountedLibpodData,
  ContainerShowMountedLibpodErrors,
  ContainerShowMountedLibpodResponses,
  ContainerStartData,
  ContainerStartErrors,
  ContainerStartLibpodData,
  ContainerStartLibpodErrors,
  ContainerStartLibpodResponses,
  ContainerStartResponses,
  ContainerStatsData,
  ContainerStatsErrors,
  ContainerStatsLibpodData,
  ContainerStatsLibpodErrors,
  ContainerStatsLibpodResponses,
  ContainerStatsResponses,
  ContainerStopData,
  ContainerStopErrors,
  ContainerStopLibpodData,
  ContainerStopLibpodErrors,
  ContainerStopLibpodResponses,
  ContainerStopResponses,
  ContainerTopData,
  ContainerTopErrors,
  ContainerTopLibpodData,
  ContainerTopLibpodErrors,
  ContainerTopLibpodResponses,
  ContainerTopResponses,
  ContainerUnmountLibpodData,
  ContainerUnmountLibpodErrors,
  ContainerUnmountLibpodResponses,
  ContainerUnpauseData,
  ContainerUnpauseErrors,
  ContainerUnpauseLibpodData,
  ContainerUnpauseLibpodErrors,
  ContainerUnpauseLibpodResponses,
  ContainerUnpauseResponses,
  ContainerUpdateData,
  ContainerUpdateErrors,
  ContainerUpdateLibpodData,
  ContainerUpdateLibpodErrors,
  ContainerUpdateLibpodResponses,
  ContainerUpdateResponses,
  ContainerWaitData,
  ContainerWaitErrors,
  ContainerWaitLibpodData,
  ContainerWaitLibpodErrors,
  ContainerWaitLibpodResponses,
  ContainerWaitResponses,
  ContainersStatsAllLibpodData,
  ContainersStatsAllLibpodErrors,
  ContainersStatsAllLibpodResponses,
  ExecInspectData,
  ExecInspectErrors,
  ExecInspectLibpodData,
  ExecInspectLibpodErrors,
  ExecInspectLibpodResponses,
  ExecInspectResponses,
  ExecResizeData,
  ExecResizeErrors,
  ExecResizeLibpodData,
  ExecResizeLibpodErrors,
  ExecResizeLibpodResponses,
  ExecResizeResponses,
  ExecStartData,
  ExecStartErrors,
  ExecStartLibpodData,
  ExecStartLibpodErrors,
  ExecStartLibpodResponses,
  ExecStartResponses,
  GenerateKubeLibpodData,
  GenerateKubeLibpodErrors,
  GenerateKubeLibpodResponses,
  GenerateSystemdLibpodData,
  GenerateSystemdLibpodErrors,
  GenerateSystemdLibpodResponses,
  ImageBuildData,
  ImageBuildErrors,
  ImageBuildLibpodData,
  ImageBuildLibpodErrors,
  ImageBuildLibpodResponses,
  ImageBuildResponses,
  ImageChangesLibpodData,
  ImageChangesLibpodErrors,
  ImageChangesLibpodResponses,
  ImageCommitData,
  ImageCommitErrors,
  ImageCommitLibpodData,
  ImageCommitLibpodErrors,
  ImageCommitLibpodResponses,
  ImageCommitResponses,
  ImageCreateData,
  ImageCreateErrors,
  ImageCreateResponses,
  ImageDeleteAllLibpodData,
  ImageDeleteAllLibpodErrors,
  ImageDeleteAllLibpodResponses,
  ImageDeleteData,
  ImageDeleteErrors,
  ImageDeleteLibpodData,
  ImageDeleteLibpodErrors,
  ImageDeleteLibpodResponses,
  ImageDeleteResponses,
  ImageExistsLibpodData,
  ImageExistsLibpodErrors,
  ImageExistsLibpodResponses,
  ImageExportLibpodData,
  ImageExportLibpodErrors,
  ImageExportLibpodResponses,
  ImageGetAllData,
  ImageGetAllErrors,
  ImageGetAllResponses,
  ImageGetData,
  ImageGetErrors,
  ImageGetLibpodData,
  ImageGetLibpodErrors,
  ImageGetLibpodResponses,
  ImageGetResponses,
  ImageHistoryData,
  ImageHistoryErrors,
  ImageHistoryLibpodData,
  ImageHistoryLibpodErrors,
  ImageHistoryLibpodResponses,
  ImageHistoryResponses,
  ImageImportLibpodData,
  ImageImportLibpodErrors,
  ImageImportLibpodResponses,
  ImageInspectData,
  ImageInspectErrors,
  ImageInspectLibpodData,
  ImageInspectLibpodErrors,
  ImageInspectLibpodResponses,
  ImageInspectResponses,
  ImageListData,
  ImageListErrors,
  ImageListLibpodData,
  ImageListLibpodErrors,
  ImageListLibpodResponses,
  ImageListResponses,
  ImageLoadData,
  ImageLoadErrors,
  ImageLoadLibpodData,
  ImageLoadLibpodErrors,
  ImageLoadLibpodResponses,
  ImageLoadResponses,
  ImagePruneData,
  ImagePruneErrors,
  ImagePruneLibpodData,
  ImagePruneLibpodErrors,
  ImagePruneLibpodResponses,
  ImagePruneResponses,
  ImagePullLibpodData,
  ImagePullLibpodErrors,
  ImagePullLibpodResponses,
  ImagePushData,
  ImagePushErrors,
  ImagePushLibpodData,
  ImagePushLibpodErrors,
  ImagePushLibpodResponses,
  ImagePushResponses,
  ImageResolveLibpodData,
  ImageResolveLibpodErrors,
  ImageResolveLibpodResponses,
  ImageScpLibpodData,
  ImageScpLibpodErrors,
  ImageScpLibpodResponses,
  ImageSearchData,
  ImageSearchErrors,
  ImageSearchLibpodData,
  ImageSearchLibpodErrors,
  ImageSearchLibpodResponses,
  ImageSearchResponses,
  ImageTagData,
  ImageTagErrors,
  ImageTagLibpodData,
  ImageTagLibpodErrors,
  ImageTagLibpodResponses,
  ImageTagResponses,
  ImageTreeLibpodData,
  ImageTreeLibpodErrors,
  ImageTreeLibpodResponses,
  ImageUntagLibpodData,
  ImageUntagLibpodErrors,
  ImageUntagLibpodResponses,
  KubeApplyLibpodData,
  KubeApplyLibpodErrors,
  KubeApplyLibpodResponses,
  ManifestAddLibpodData,
  ManifestAddLibpodErrors,
  ManifestAddLibpodResponses,
  ManifestCreateLibpodData,
  ManifestCreateLibpodErrors,
  ManifestCreateLibpodResponses,
  ManifestDeleteLibpodData,
  ManifestDeleteLibpodErrors,
  ManifestDeleteLibpodResponses,
  ManifestExistsLibpodData,
  ManifestExistsLibpodErrors,
  ManifestExistsLibpodResponses,
  ManifestInspectLibpodData,
  ManifestInspectLibpodErrors,
  ManifestInspectLibpodResponses,
  ManifestModifyLibpodData,
  ManifestModifyLibpodErrors,
  ManifestModifyLibpodResponses,
  ManifestPushLibpodData,
  ManifestPushLibpodErrors,
  ManifestPushLibpodResponses,
  ManifestPushV3LibpodData,
  ManifestPushV3LibpodErrors,
  ManifestPushV3LibpodResponses,
  NetworkConnectData,
  NetworkConnectErrors,
  NetworkConnectLibpodData,
  NetworkConnectLibpodErrors,
  NetworkConnectLibpodResponses,
  NetworkConnectResponses,
  NetworkCreateData,
  NetworkCreateErrors,
  NetworkCreateLibpodData,
  NetworkCreateLibpodErrors,
  NetworkCreateLibpodResponses,
  NetworkCreateResponses,
  NetworkDeleteData,
  NetworkDeleteErrors,
  NetworkDeleteLibpodData,
  NetworkDeleteLibpodErrors,
  NetworkDeleteLibpodResponses,
  NetworkDeleteResponses,
  NetworkDisconnectData,
  NetworkDisconnectErrors,
  NetworkDisconnectLibpodData,
  NetworkDisconnectLibpodErrors,
  NetworkDisconnectLibpodResponses,
  NetworkDisconnectResponses,
  NetworkExistsLibpodData,
  NetworkExistsLibpodErrors,
  NetworkExistsLibpodResponses,
  NetworkInspectData,
  NetworkInspectErrors,
  NetworkInspectLibpodData,
  NetworkInspectLibpodErrors,
  NetworkInspectLibpodResponses,
  NetworkInspectResponses,
  NetworkListData,
  NetworkListErrors,
  NetworkListLibpodData,
  NetworkListLibpodErrors,
  NetworkListLibpodResponses,
  NetworkListResponses,
  NetworkPruneData,
  NetworkPruneErrors,
  NetworkPruneLibpodData,
  NetworkPruneLibpodErrors,
  NetworkPruneLibpodResponses,
  NetworkPruneResponses,
  NetworkUpdateLibpodData,
  NetworkUpdateLibpodErrors,
  NetworkUpdateLibpodResponses,
  PlayKubeDownLibpodData,
  PlayKubeDownLibpodErrors,
  PlayKubeDownLibpodResponses,
  PlayKubeLibpodData,
  PlayKubeLibpodErrors,
  PlayKubeLibpodResponses,
  PodCreateLibpodData,
  PodCreateLibpodErrors,
  PodCreateLibpodResponses,
  PodDeleteLibpodData,
  PodDeleteLibpodErrors,
  PodDeleteLibpodResponses,
  PodExistsLibpodData,
  PodExistsLibpodErrors,
  PodExistsLibpodResponses,
  PodInspectLibpodData,
  PodInspectLibpodErrors,
  PodInspectLibpodResponses,
  PodKillLibpodData,
  PodKillLibpodErrors,
  PodKillLibpodResponses,
  PodListLibpodData,
  PodListLibpodErrors,
  PodListLibpodResponses,
  PodPauseLibpodData,
  PodPauseLibpodErrors,
  PodPauseLibpodResponses,
  PodPruneLibpodData,
  PodPruneLibpodErrors,
  PodPruneLibpodResponses,
  PodRestartLibpodData,
  PodRestartLibpodErrors,
  PodRestartLibpodResponses,
  PodStartLibpodData,
  PodStartLibpodErrors,
  PodStartLibpodResponses,
  PodStatsAllLibpodData,
  PodStatsAllLibpodErrors,
  PodStatsAllLibpodResponses,
  PodStopLibpodData,
  PodStopLibpodErrors,
  PodStopLibpodResponses,
  PodTopLibpodData,
  PodTopLibpodErrors,
  PodTopLibpodResponses,
  PodUnpauseLibpodData,
  PodUnpauseLibpodErrors,
  PodUnpauseLibpodResponses,
  PutContainerArchiveData,
  PutContainerArchiveErrors,
  PutContainerArchiveLibpodData,
  PutContainerArchiveLibpodErrors,
  PutContainerArchiveLibpodResponses,
  PutContainerArchiveResponses,
  SecretCreateData,
  SecretCreateErrors,
  SecretCreateLibpodData,
  SecretCreateLibpodErrors,
  SecretCreateLibpodResponses,
  SecretCreateResponses,
  SecretDeleteData,
  SecretDeleteErrors,
  SecretDeleteLibpodData,
  SecretDeleteLibpodErrors,
  SecretDeleteLibpodResponses,
  SecretDeleteResponses,
  SecretExistsLibpodData,
  SecretExistsLibpodErrors,
  SecretExistsLibpodResponses,
  SecretInspectData,
  SecretInspectErrors,
  SecretInspectLibpodData,
  SecretInspectLibpodErrors,
  SecretInspectLibpodResponses,
  SecretInspectResponses,
  SecretListData,
  SecretListErrors,
  SecretListLibpodData,
  SecretListLibpodErrors,
  SecretListLibpodResponses,
  SecretListResponses,
  SystemAuthData,
  SystemAuthErrors,
  SystemAuthResponses,
  SystemCheckLibpodData,
  SystemCheckLibpodErrors,
  SystemCheckLibpodResponses,
  SystemDataUsageData,
  SystemDataUsageErrors,
  SystemDataUsageLibpodData,
  SystemDataUsageLibpodErrors,
  SystemDataUsageLibpodResponses,
  SystemDataUsageResponses,
  SystemEventsData,
  SystemEventsErrors,
  SystemEventsLibpodData,
  SystemEventsLibpodErrors,
  SystemEventsLibpodResponses,
  SystemEventsResponses,
  SystemInfoData,
  SystemInfoErrors,
  SystemInfoLibpodData,
  SystemInfoLibpodErrors,
  SystemInfoLibpodResponses,
  SystemInfoResponses,
  SystemPingData,
  SystemPingErrors,
  SystemPingResponses,
  SystemPruneLibpodData,
  SystemPruneLibpodErrors,
  SystemPruneLibpodResponses,
  SystemVersionData,
  SystemVersionLibpodData,
  SystemVersionLibpodResponses,
  SystemVersionResponses,
  VolumeCreateData,
  VolumeCreateErrors,
  VolumeCreateLibpodData,
  VolumeCreateLibpodErrors,
  VolumeCreateLibpodResponses,
  VolumeCreateResponses,
  VolumeDeleteData,
  VolumeDeleteErrors,
  VolumeDeleteLibpodData,
  VolumeDeleteLibpodErrors,
  VolumeDeleteLibpodResponses,
  VolumeDeleteResponses,
  VolumeExistsLibpodData,
  VolumeExistsLibpodErrors,
  VolumeExistsLibpodResponses,
  VolumeInspectData,
  VolumeInspectErrors,
  VolumeInspectLibpodData,
  VolumeInspectLibpodErrors,
  VolumeInspectLibpodResponses,
  VolumeInspectResponses,
  VolumeListData,
  VolumeListErrors,
  VolumeListLibpodData,
  VolumeListLibpodErrors,
  VolumeListLibpodResponses,
  VolumeListResponses,
  VolumePruneData,
  VolumePruneErrors,
  VolumePruneLibpodData,
  VolumePruneLibpodErrors,
  VolumePruneLibpodResponses,
  VolumePruneResponses,
} from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<
  TData,
  ThrowOnError
> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Check auth configuration
 */
export const systemAuth = <ThrowOnError extends boolean = false>(options?: Options<SystemAuthData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<SystemAuthResponses, SystemAuthErrors, ThrowOnError>({
    url: '/auth',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Create image
 * Build an image from the given Dockerfile(s)
 */
export const imageBuild = <ThrowOnError extends boolean = false>(options?: Options<ImageBuildData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<ImageBuildResponses, ImageBuildErrors, ThrowOnError>({
    url: '/build',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * New Image
 * Create a new image from a container
 */
export const imageCommit = <ThrowOnError extends boolean = false>(options?: Options<ImageCommitData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<ImageCommitResponses, ImageCommitErrors, ThrowOnError>({
    url: '/commit',
    ...options,
  });
};

/**
 * Remove a container
 */
export const containerDelete = <ThrowOnError extends boolean = false>(
  options: Options<ContainerDeleteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<ContainerDeleteResponses, ContainerDeleteErrors, ThrowOnError>({
    url: '/containers/{name}',
    ...options,
  });
};

/**
 * Get files from a container
 * Get a tar archive of files from a container
 */
export const containerArchive = <ThrowOnError extends boolean = false>(
  options: Options<ContainerArchiveData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<ContainerArchiveResponses, ContainerArchiveErrors, ThrowOnError>({
    url: '/containers/{name}/archive',
    ...options,
  });
};

/**
 * Put files into a container
 * Put a tar archive of files into a container
 */
export const putContainerArchive = <ThrowOnError extends boolean = false>(
  options: Options<PutContainerArchiveData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<PutContainerArchiveResponses, PutContainerArchiveErrors, ThrowOnError>({
    url: '/containers/{name}/archive',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Attach to a container
 * Attach to a container to read its output or send it input. You can attach
 * to the same container multiple times and you can reattach to containers
 * that have been detached.
 *
 * It uses the same stream format as docker, see the libpod attach endpoint for a description of the format.
 *
 */
export const containerAttach = <ThrowOnError extends boolean = false>(
  options: Options<ContainerAttachData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<unknown, ContainerAttachErrors, ThrowOnError>({
    url: '/containers/{name}/attach',
    ...options,
  });
};

/**
 * Create an exec instance
 * Create an exec session to run a command inside a running container. Exec sessions will be automatically removed 5 minutes after they exit.
 */
export const containerExec = <ThrowOnError extends boolean = false>(
  options: Options<ContainerExecData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<ContainerExecResponses, ContainerExecErrors, ThrowOnError>({
    url: '/containers/{name}/exec',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Export a container
 * Export the contents of a container as a tarball.
 */
export const containerExport = <ThrowOnError extends boolean = false>(
  options: Options<ContainerExportData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<ContainerExportResponses, ContainerExportErrors, ThrowOnError>({
    url: '/containers/{name}/export',
    ...options,
  });
};

/**
 * Inspect container
 * Return low-level information about a container.
 */
export const containerInspect = <ThrowOnError extends boolean = false>(
  options: Options<ContainerInspectData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<ContainerInspectResponses, ContainerInspectErrors, ThrowOnError>({
    url: '/containers/{name}/json',
    ...options,
  });
};

/**
 * Kill container
 * Signal to send to the container as an integer or string (e.g. SIGINT)
 */
export const containerKill = <ThrowOnError extends boolean = false>(
  options: Options<ContainerKillData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<ContainerKillResponses, ContainerKillErrors, ThrowOnError>({
    url: '/containers/{name}/kill',
    ...options,
  });
};

/**
 * Get container logs
 * Get stdout and stderr logs from a container.
 */
export const containerLogs = <ThrowOnError extends boolean = false>(
  options: Options<ContainerLogsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<ContainerLogsResponses, ContainerLogsErrors, ThrowOnError>({
    url: '/containers/{name}/logs',
    ...options,
  });
};

/**
 * Pause container
 * Use the cgroups freezer to suspend all processes in a container.
 */
export const containerPause = <ThrowOnError extends boolean = false>(
  options: Options<ContainerPauseData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<ContainerPauseResponses, ContainerPauseErrors, ThrowOnError>({
    url: '/containers/{name}/pause',
    ...options,
  });
};

/**
 * Rename an existing container
 * Change the name of an existing container.
 */
export const containerRename = <ThrowOnError extends boolean = false>(
  options: Options<ContainerRenameData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<ContainerRenameResponses, ContainerRenameErrors, ThrowOnError>({
    url: '/containers/{name}/rename',
    ...options,
  });
};

/**
 * Resize a container's TTY
 * Resize the terminal attached to a container (for use with Attach).
 */
export const containerResize = <ThrowOnError extends boolean = false>(
  options: Options<ContainerResizeData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<ContainerResizeResponses, ContainerResizeErrors, ThrowOnError>({
    url: '/containers/{name}/resize',
    ...options,
  });
};

/**
 * Restart container
 */
export const containerRestart = <ThrowOnError extends boolean = false>(
  options: Options<ContainerRestartData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<ContainerRestartResponses, ContainerRestartErrors, ThrowOnError>({
    url: '/containers/{name}/restart',
    ...options,
  });
};

/**
 * Start a container
 */
export const containerStart = <ThrowOnError extends boolean = false>(
  options: Options<ContainerStartData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<ContainerStartResponses, ContainerStartErrors, ThrowOnError>({
    url: '/containers/{name}/start',
    ...options,
  });
};

/**
 * Get stats for a container
 * This returns a live stream of a container’s resource usage statistics.
 */
export const containerStats = <ThrowOnError extends boolean = false>(
  options: Options<ContainerStatsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<ContainerStatsResponses, ContainerStatsErrors, ThrowOnError>({
    url: '/containers/{name}/stats',
    ...options,
  });
};

/**
 * Stop a container
 * Stop a container
 */
export const containerStop = <ThrowOnError extends boolean = false>(
  options: Options<ContainerStopData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<ContainerStopResponses, ContainerStopErrors, ThrowOnError>({
    url: '/containers/{name}/stop',
    ...options,
  });
};

/**
 * List processes running inside a container
 */
export const containerTop = <ThrowOnError extends boolean = false>(
  options: Options<ContainerTopData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<ContainerTopResponses, ContainerTopErrors, ThrowOnError>({
    url: '/containers/{name}/top',
    ...options,
  });
};

/**
 * Unpause container
 * Resume a paused container
 */
export const containerUnpause = <ThrowOnError extends boolean = false>(
  options: Options<ContainerUnpauseData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<ContainerUnpauseResponses, ContainerUnpauseErrors, ThrowOnError>({
    url: '/containers/{name}/unpause',
    ...options,
  });
};

/**
 * Update configuration of an existing container
 * Change configuration settings for an existing container without requiring recreation.
 */
export const containerUpdate = <ThrowOnError extends boolean = false>(
  options: Options<ContainerUpdateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<ContainerUpdateResponses, ContainerUpdateErrors, ThrowOnError>({
    url: '/containers/{name}/update',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Wait on a container
 * Block until a container stops or given condition is met.
 */
export const containerWait = <ThrowOnError extends boolean = false>(
  options: Options<ContainerWaitData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<ContainerWaitResponses, ContainerWaitErrors, ThrowOnError>({
    url: '/containers/{name}/wait',
    ...options,
  });
};

/**
 * Create a container
 */
export const containerCreate = <ThrowOnError extends boolean = false>(
  options: Options<ContainerCreateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<ContainerCreateResponses, ContainerCreateErrors, ThrowOnError>({
    url: '/containers/create',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List containers
 * Returns a list of containers
 */
export const containerList = <ThrowOnError extends boolean = false>(
  options?: Options<ContainerListData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<ContainerListResponses, ContainerListErrors, ThrowOnError>({
    url: '/containers/json',
    ...options,
  });
};

/**
 * Delete stopped containers
 * Remove containers not in use
 */
export const containerPrune = <ThrowOnError extends boolean = false>(
  options?: Options<ContainerPruneData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<ContainerPruneResponses, ContainerPruneErrors, ThrowOnError>({
    url: '/containers/prune',
    ...options,
  });
};

/**
 * Get events
 * Returns events filtered on query parameters
 */
export const systemEvents = <ThrowOnError extends boolean = false>(
  options?: Options<SystemEventsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<SystemEventsResponses, SystemEventsErrors, ThrowOnError>({
    url: '/events',
    ...options,
  });
};

/**
 * Inspect an exec instance
 * Return low-level information about an exec instance.
 */
export const execInspect = <ThrowOnError extends boolean = false>(options: Options<ExecInspectData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<ExecInspectResponses, ExecInspectErrors, ThrowOnError>({
    url: '/exec/{id}/json',
    ...options,
  });
};

/**
 * Resize an exec instance
 * Resize the TTY session used by an exec instance. This endpoint only works if tty was specified as part of creating and starting the exec instance.
 *
 */
export const execResize = <ThrowOnError extends boolean = false>(options: Options<ExecResizeData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<ExecResizeResponses, ExecResizeErrors, ThrowOnError>({
    url: '/exec/{id}/resize',
    ...options,
  });
};

/**
 * Start an exec instance
 * Starts a previously set up exec instance. If detach is true, this endpoint returns immediately after starting the command. Otherwise, it sets up an interactive session with the command.
 */
export const execStart = <ThrowOnError extends boolean = false>(options: Options<ExecStartData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<ExecStartResponses, ExecStartErrors, ThrowOnError>({
    url: '/exec/{id}/start',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Remove Image
 * Delete an image from local storage
 */
export const imageDelete = <ThrowOnError extends boolean = false>(options: Options<ImageDeleteData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).delete<ImageDeleteResponses, ImageDeleteErrors, ThrowOnError>({
    url: '/images/{name}',
    ...options,
  });
};

/**
 * Export an image
 * Export an image in tarball format
 */
export const imageGet = <ThrowOnError extends boolean = false>(options: Options<ImageGetData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<ImageGetResponses, ImageGetErrors, ThrowOnError>({
    url: '/images/{name}/get',
    ...options,
  });
};

/**
 * History of an image
 * Return parent layers of an image.
 */
export const imageHistory = <ThrowOnError extends boolean = false>(
  options: Options<ImageHistoryData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<ImageHistoryResponses, ImageHistoryErrors, ThrowOnError>({
    url: '/images/{name}/history',
    ...options,
  });
};

/**
 * Inspect an image
 * Return low-level information about an image.
 */
export const imageInspect = <ThrowOnError extends boolean = false>(
  options: Options<ImageInspectData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<ImageInspectResponses, ImageInspectErrors, ThrowOnError>({
    url: '/images/{name}/json',
    ...options,
  });
};

/**
 * Push Image
 * Push an image to a container registry
 */
export const imagePush = <ThrowOnError extends boolean = false>(options: Options<ImagePushData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<ImagePushResponses, ImagePushErrors, ThrowOnError>({
    url: '/images/{name}/push',
    ...options,
  });
};

/**
 * Tag an image
 * Tag an image so that it becomes part of a repository.
 */
export const imageTag = <ThrowOnError extends boolean = false>(options: Options<ImageTagData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<ImageTagResponses, ImageTagErrors, ThrowOnError>({
    url: '/images/{name}/tag',
    ...options,
  });
};

/**
 * Create an image
 * Create an image by either pulling it from a registry or importing it.
 */
export const imageCreate = <ThrowOnError extends boolean = false>(options?: Options<ImageCreateData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<ImageCreateResponses, ImageCreateErrors, ThrowOnError>({
    bodySerializer: null,
    url: '/images/create',
    ...options,
    headers: {
      'Content-Type': 'text/plain',
      ...options?.headers,
    },
  });
};

/**
 * Export several images
 * Get a tarball containing all images and metadata for several image repositories
 */
export const imageGetAll = <ThrowOnError extends boolean = false>(options: Options<ImageGetAllData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<ImageGetAllResponses, ImageGetAllErrors, ThrowOnError>({
    url: '/images/get',
    ...options,
  });
};

/**
 * List Images
 * Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image.
 */
export const imageList = <ThrowOnError extends boolean = false>(options?: Options<ImageListData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<ImageListResponses, ImageListErrors, ThrowOnError>({
    url: '/images/json',
    ...options,
  });
};

/**
 * Import image
 * Load a set of images and tags into a repository.
 */
export const imageLoad = <ThrowOnError extends boolean = false>(options?: Options<ImageLoadData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<ImageLoadResponses, ImageLoadErrors, ThrowOnError>({
    url: '/images/load',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Prune unused images
 * Remove images from local storage that are not being used by a container
 */
export const imagePrune = <ThrowOnError extends boolean = false>(options?: Options<ImagePruneData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<ImagePruneResponses, ImagePruneErrors, ThrowOnError>({
    url: '/images/prune',
    ...options,
  });
};

/**
 * Search images
 * Search registries for an image
 */
export const imageSearch = <ThrowOnError extends boolean = false>(options?: Options<ImageSearchData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<ImageSearchResponses, ImageSearchErrors, ThrowOnError>({
    url: '/images/search',
    ...options,
  });
};

/**
 * Get info
 * Returns information on the system and libpod configuration
 */
export const systemInfo = <ThrowOnError extends boolean = false>(options?: Options<SystemInfoData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<SystemInfoResponses, SystemInfoErrors, ThrowOnError>({
    url: '/info',
    ...options,
  });
};

/**
 * Ping service
 * Return protocol information in response headers.
 * `HEAD /libpod/_ping` is also supported.
 * `/_ping` is available for compatibility with other engines.
 * The '_ping' endpoints are not versioned.
 *
 */
export const systemPing = <ThrowOnError extends boolean = false>(options?: Options<SystemPingData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<SystemPingResponses, SystemPingErrors, ThrowOnError>({
    url: '/libpod/_ping',
    ...options,
  });
};

/**
 * Create image
 * Build an image from the given Dockerfile(s)
 */
export const imageBuildLibpod = <ThrowOnError extends boolean = false>(
  options?: Options<ImageBuildLibpodData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<ImageBuildLibpodResponses, ImageBuildLibpodErrors, ThrowOnError>({
    querySerializer: {
      array: {
        explode: false,
        style: 'form',
      },
    },
    url: '/libpod/build',
    ...options,
  });
};

/**
 * Commit
 * Create a new image from a container
 */
export const imageCommitLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ImageCommitLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<ImageCommitLibpodResponses, ImageCommitLibpodErrors, ThrowOnError>({
    querySerializer: {
      array: {
        explode: false,
        style: 'form',
      },
    },
    url: '/libpod/commit',
    ...options,
  });
};

/**
 * Delete container
 * Delete container
 */
export const containerDeleteLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ContainerDeleteLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    ContainerDeleteLibpodResponses,
    ContainerDeleteLibpodErrors,
    ThrowOnError
  >({
    url: '/libpod/containers/{name}',
    ...options,
  });
};

/**
 * Copy files from a container
 * Copy a tar archive of files from a container
 */
export const containerArchiveLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ContainerArchiveLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ContainerArchiveLibpodResponses,
    ContainerArchiveLibpodErrors,
    ThrowOnError
  >({
    url: '/libpod/containers/{name}/archive',
    ...options,
  });
};

/**
 * Copy files into a container
 * Copy a tar archive of files into a container
 */
export const putContainerArchiveLibpod = <ThrowOnError extends boolean = false>(
  options: Options<PutContainerArchiveLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    PutContainerArchiveLibpodResponses,
    PutContainerArchiveLibpodErrors,
    ThrowOnError
  >({
    url: '/libpod/containers/{name}/archive',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Attach to a container
 * Attach to a container to read its output or send it input. You can attach
 * to the same container multiple times and you can reattach to containers
 * that have been detached.
 *
 * ### Hijacking
 *
 * This endpoint hijacks the HTTP connection to transport `stdin`, `stdout`,
 * and `stderr` on the same socket.
 *
 * This is the response from the service for an attach request:
 *
 * ```
 * HTTP/1.1 200 OK
 * Content-Type: application/vnd.docker.raw-stream
 *
 * [STREAM]
 * ```
 *
 * After the headers and two new lines, the TCP connection can now be used
 * for raw, bidirectional communication between the client and server.
 *
 * To inform potential proxies about connection hijacking, the client
 * can also optionally send connection upgrade headers.
 *
 * For example, the client sends this request to upgrade the connection:
 *
 * ```
 * POST /v4.6.0/libpod/containers/16253994b7c4/attach?stream=1&stdout=1 HTTP/1.1
 * Upgrade: tcp
 * Connection: Upgrade
 * ```
 *
 * The service will respond with a `101 UPGRADED` response, and will
 * similarly follow with the raw stream:
 *
 * ```
 * HTTP/1.1 101 UPGRADED
 * Content-Type: application/vnd.docker.raw-stream
 * Connection: Upgrade
 * Upgrade: tcp
 *
 * [STREAM]
 * ```
 *
 * ### Stream format
 *
 * When the TTY setting is disabled for the container,
 * the HTTP Content-Type header is set to application/vnd.docker.multiplexed-stream
 * (starting with v4.7.0, previously application/vnd.docker.raw-stream was always used)
 * and the stream over the hijacked connected is multiplexed to separate out
 * `stdout` and `stderr`. The stream consists of a series of frames, each
 * containing a header and a payload.
 *
 * The header contains the information about the output stream type and the size of
 * the payload.
 * It is encoded on the first eight bytes like this:
 *
 * ```go
 * header := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4}
 * ```
 *
 * `STREAM_TYPE` can be:
 *
 * - 0: `stdin` (is written on `stdout`)
 * - 1: `stdout`
 * - 2: `stderr`
 *
 * `SIZE1, SIZE2, SIZE3, SIZE4` are the four bytes of the `uint32` size
 * encoded as big endian.
 *
 * Following the header is the payload, which contains the specified number of
 * bytes as written in the size.
 *
 * The simplest way to implement this protocol is the following:
 *
 * 1. Read 8 bytes.
 * 2. Choose `stdout` or `stderr` depending on the first byte.
 * 3. Extract the frame size from the last four bytes.
 * 4. Read the extracted size and output it on the correct output.
 * 5. Goto 1.
 *
 * ### Stream format when using a TTY
 *
 * When the TTY setting is enabled for the container,
 * the stream is not multiplexed. The data exchanged over the hijacked
 * connection is simply the raw data from the process PTY and client's
 * `stdin`.
 *
 */
export const containerAttachLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ContainerAttachLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<unknown, ContainerAttachLibpodErrors, ThrowOnError>({
    url: '/libpod/containers/{name}/attach',
    ...options,
  });
};

/**
 * Report on changes to container's filesystem; adds, deletes or modifications.
 * Returns which files in a container's filesystem have been added, deleted, or modified. The Kind of modification can be one of:
 *
 * 0: Modified
 * 1: Added
 * 2: Deleted
 *
 */
export const containerChangesLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ContainerChangesLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ContainerChangesLibpodResponses,
    ContainerChangesLibpodErrors,
    ThrowOnError
  >({
    url: '/libpod/containers/{name}/changes',
    ...options,
  });
};

/**
 * Checkpoint a container
 */
export const containerCheckpointLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ContainerCheckpointLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ContainerCheckpointLibpodResponses,
    ContainerCheckpointLibpodErrors,
    ThrowOnError
  >({
    url: '/libpod/containers/{name}/checkpoint',
    ...options,
  });
};

/**
 * Create an exec instance
 * Create an exec session to run a command inside a running container. Exec sessions will be automatically removed 5 minutes after they exit.
 */
export const containerExecLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ContainerExecLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<ContainerExecLibpodResponses, ContainerExecLibpodErrors, ThrowOnError>({
    url: '/libpod/containers/{name}/exec',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Check if container exists
 * Quick way to determine if a container exists by name or ID
 */
export const containerExistsLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ContainerExistsLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ContainerExistsLibpodResponses,
    ContainerExistsLibpodErrors,
    ThrowOnError
  >({
    url: '/libpod/containers/{name}/exists',
    ...options,
  });
};

/**
 * Export a container
 * Export the contents of a container as a tarball.
 */
export const containerExportLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ContainerExportLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ContainerExportLibpodResponses,
    ContainerExportLibpodErrors,
    ThrowOnError
  >({
    url: '/libpod/containers/{name}/export',
    ...options,
  });
};

/**
 * Run a container's healthcheck
 * Execute the defined healthcheck and return information about the results
 */
export const containerHealthcheckLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ContainerHealthcheckLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ContainerHealthcheckLibpodResponses,
    ContainerHealthcheckLibpodErrors,
    ThrowOnError
  >({
    url: '/libpod/containers/{name}/healthcheck',
    ...options,
  });
};

/**
 * Initialize a container
 * Performs all tasks necessary for initializing the container but does not start the container.
 */
export const containerInitLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ContainerInitLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<ContainerInitLibpodResponses, ContainerInitLibpodErrors, ThrowOnError>({
    url: '/libpod/containers/{name}/init',
    ...options,
  });
};

/**
 * Inspect container
 * Return low-level information about a container.
 */
export const containerInspectLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ContainerInspectLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ContainerInspectLibpodResponses,
    ContainerInspectLibpodErrors,
    ThrowOnError
  >({
    url: '/libpod/containers/{name}/json',
    ...options,
  });
};

/**
 * Kill container
 * send a signal to a container, defaults to killing the container
 */
export const containerKillLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ContainerKillLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<ContainerKillLibpodResponses, ContainerKillLibpodErrors, ThrowOnError>({
    url: '/libpod/containers/{name}/kill',
    ...options,
  });
};

/**
 * Get container logs
 * Get stdout and stderr logs from a container.
 *
 * The stream format is the same as described in the attach endpoint.
 *
 */
export const containerLogsLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ContainerLogsLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<ContainerLogsLibpodResponses, ContainerLogsLibpodErrors, ThrowOnError>({
    url: '/libpod/containers/{name}/logs',
    ...options,
  });
};

/**
 * Mount a container
 * Mount a container to the filesystem
 */
export const containerMountLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ContainerMountLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ContainerMountLibpodResponses,
    ContainerMountLibpodErrors,
    ThrowOnError
  >({
    url: '/libpod/containers/{name}/mount',
    ...options,
  });
};

/**
 * Pause a container
 * Use the cgroups freezer to suspend all processes in a container.
 */
export const containerPauseLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ContainerPauseLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ContainerPauseLibpodResponses,
    ContainerPauseLibpodErrors,
    ThrowOnError
  >({
    url: '/libpod/containers/{name}/pause',
    ...options,
  });
};

/**
 * Rename an existing container
 * Change the name of an existing container.
 */
export const containerRenameLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ContainerRenameLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ContainerRenameLibpodResponses,
    ContainerRenameLibpodErrors,
    ThrowOnError
  >({
    url: '/libpod/containers/{name}/rename',
    ...options,
  });
};

/**
 * Resize a container's TTY
 * Resize the terminal attached to a container (for use with Attach).
 */
export const containerResizeLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ContainerResizeLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ContainerResizeLibpodResponses,
    ContainerResizeLibpodErrors,
    ThrowOnError
  >({
    url: '/libpod/containers/{name}/resize',
    ...options,
  });
};

/**
 * Restart a container
 */
export const containerRestartLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ContainerRestartLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ContainerRestartLibpodResponses,
    ContainerRestartLibpodErrors,
    ThrowOnError
  >({
    url: '/libpod/containers/{name}/restart',
    ...options,
  });
};

/**
 * Restore a container
 * Restore a container from a checkpoint.
 */
export const containerRestoreLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ContainerRestoreLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ContainerRestoreLibpodResponses,
    ContainerRestoreLibpodErrors,
    ThrowOnError
  >({
    url: '/libpod/containers/{name}/restore',
    ...options,
  });
};

/**
 * Start a container
 */
export const containerStartLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ContainerStartLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ContainerStartLibpodResponses,
    ContainerStartLibpodErrors,
    ThrowOnError
  >({
    url: '/libpod/containers/{name}/start',
    ...options,
  });
};

/**
 * Get stats for a container
 * DEPRECATED. This endpoint will be removed with the next major release. Please use /libpod/containers/stats instead.
 */
export const containerStatsLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ContainerStatsLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<ContainerStatsLibpodResponses, ContainerStatsLibpodErrors, ThrowOnError>(
    {
      url: '/libpod/containers/{name}/stats',
      ...options,
    }
  );
};

/**
 * Stop a container
 */
export const containerStopLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ContainerStopLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<ContainerStopLibpodResponses, ContainerStopLibpodErrors, ThrowOnError>({
    url: '/libpod/containers/{name}/stop',
    ...options,
  });
};

/**
 * List processes
 * List processes running inside a container
 */
export const containerTopLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ContainerTopLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<ContainerTopLibpodResponses, ContainerTopLibpodErrors, ThrowOnError>({
    querySerializer: {
      array: {
        explode: false,
        style: 'form',
      },
    },
    url: '/libpod/containers/{name}/top',
    ...options,
  });
};

/**
 * Unmount a container
 * Unmount a container from the filesystem
 */
export const containerUnmountLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ContainerUnmountLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ContainerUnmountLibpodResponses,
    ContainerUnmountLibpodErrors,
    ThrowOnError
  >({
    url: '/libpod/containers/{name}/unmount',
    ...options,
  });
};

/**
 * Unpause Container
 */
export const containerUnpauseLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ContainerUnpauseLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ContainerUnpauseLibpodResponses,
    ContainerUnpauseLibpodErrors,
    ThrowOnError
  >({
    url: '/libpod/containers/{name}/unpause',
    ...options,
  });
};

/**
 * Updates the configuration of an existing container, allowing changes to resource limits and healthchecks
 * Updates the configuration of an existing container, allowing changes to resource limits and healthchecks.
 */
export const containerUpdateLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ContainerUpdateLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ContainerUpdateLibpodResponses,
    ContainerUpdateLibpodErrors,
    ThrowOnError
  >({
    url: '/libpod/containers/{name}/update',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Wait on a container
 * Wait on a container to meet a given condition
 */
export const containerWaitLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ContainerWaitLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<ContainerWaitLibpodResponses, ContainerWaitLibpodErrors, ThrowOnError>({
    querySerializer: {
      array: {
        explode: false,
        style: 'form',
      },
    },
    url: '/libpod/containers/{name}/wait',
    ...options,
  });
};

/**
 * Create a container
 */
export const containerCreateLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ContainerCreateLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ContainerCreateLibpodResponses,
    ContainerCreateLibpodErrors,
    ThrowOnError
  >({
    url: '/libpod/containers/create',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List containers
 * Returns a list of containers
 */
export const containerListLibpod = <ThrowOnError extends boolean = false>(
  options?: Options<ContainerListLibpodData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<ContainerListLibpodResponses, ContainerListLibpodErrors, ThrowOnError>({
    url: '/libpod/containers/json',
    ...options,
  });
};

/**
 * Delete stopped containers
 * Remove containers not in use
 */
export const containerPruneLibpod = <ThrowOnError extends boolean = false>(
  options?: Options<ContainerPruneLibpodData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    ContainerPruneLibpodResponses,
    ContainerPruneLibpodErrors,
    ThrowOnError
  >({
    url: '/libpod/containers/prune',
    ...options,
  });
};

/**
 * Show mounted containers
 * Lists all mounted containers mount points
 */
export const containerShowMountedLibpod = <ThrowOnError extends boolean = false>(
  options?: Options<ContainerShowMountedLibpodData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ContainerShowMountedLibpodResponses,
    ContainerShowMountedLibpodErrors,
    ThrowOnError
  >({
    url: '/libpod/containers/showmounted',
    ...options,
  });
};

/**
 * Get stats for one or more containers
 * Return a live stream of resource usage statistics of one or more container. If no container is specified, the statistics of all containers are returned.
 */
export const containersStatsAllLibpod = <ThrowOnError extends boolean = false>(
  options?: Options<ContainersStatsAllLibpodData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ContainersStatsAllLibpodResponses,
    ContainersStatsAllLibpodErrors,
    ThrowOnError
  >({
    querySerializer: {
      array: {
        explode: false,
        style: 'form',
      },
    },
    url: '/libpod/containers/stats',
    ...options,
  });
};

/**
 * Get events
 * Returns events filtered on query parameters
 */
export const systemEventsLibpod = <ThrowOnError extends boolean = false>(
  options?: Options<SystemEventsLibpodData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<SystemEventsLibpodResponses, SystemEventsLibpodErrors, ThrowOnError>({
    url: '/libpod/events',
    ...options,
  });
};

/**
 * Inspect an exec instance
 * Return low-level information about an exec instance.
 */
export const execInspectLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ExecInspectLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<ExecInspectLibpodResponses, ExecInspectLibpodErrors, ThrowOnError>({
    url: '/libpod/exec/{id}/json',
    ...options,
  });
};

/**
 * Resize an exec instance
 * Resize the TTY session used by an exec instance. This endpoint only works if tty was specified as part of creating and starting the exec instance.
 *
 */
export const execResizeLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ExecResizeLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<ExecResizeLibpodResponses, ExecResizeLibpodErrors, ThrowOnError>({
    url: '/libpod/exec/{id}/resize',
    ...options,
  });
};

/**
 * Start an exec instance
 * Starts a previously set up exec instance. If detach is true, this endpoint returns immediately after starting the command.
 * Otherwise, it sets up an interactive session with the command. The stream format is the same as the attach endpoint.
 *
 */
export const execStartLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ExecStartLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<ExecStartLibpodResponses, ExecStartLibpodErrors, ThrowOnError>({
    url: '/libpod/exec/{id}/start',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Generate Systemd Units
 * Generate Systemd Units based on a pod or container.
 */
export const generateSystemdLibpod = <ThrowOnError extends boolean = false>(
  options: Options<GenerateSystemdLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GenerateSystemdLibpodResponses,
    GenerateSystemdLibpodErrors,
    ThrowOnError
  >({
    querySerializer: {
      array: {
        explode: false,
        style: 'form',
      },
    },
    url: '/libpod/generate/{name}/systemd',
    ...options,
  });
};

/**
 * Generate a Kubernetes YAML file.
 * Generate Kubernetes YAML based on a pod or container.
 */
export const generateKubeLibpod = <ThrowOnError extends boolean = false>(
  options: Options<GenerateKubeLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<GenerateKubeLibpodResponses, GenerateKubeLibpodErrors, ThrowOnError>({
    querySerializer: {
      array: {
        explode: false,
        style: 'form',
      },
    },
    url: '/libpod/generate/kube',
    ...options,
  });
};

/**
 * Remove an image from the local storage.
 * Remove an image from the local storage.
 */
export const imageDeleteLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ImageDeleteLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<ImageDeleteLibpodResponses, ImageDeleteLibpodErrors, ThrowOnError>({
    url: '/libpod/images/{name}',
    ...options,
  });
};

/**
 * Report on changes to images's filesystem; adds, deletes or modifications.
 * Returns which files in an image's filesystem have been added, deleted, or modified. The Kind of modification can be one of:
 *
 * 0: Modified
 * 1: Added
 * 2: Deleted
 *
 */
export const imageChangesLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ImageChangesLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<ImageChangesLibpodResponses, ImageChangesLibpodErrors, ThrowOnError>({
    url: '/libpod/images/{name}/changes',
    ...options,
  });
};

/**
 * Image exists
 * Check if image exists in local store
 */
export const imageExistsLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ImageExistsLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<ImageExistsLibpodResponses, ImageExistsLibpodErrors, ThrowOnError>({
    url: '/libpod/images/{name}/exists',
    ...options,
  });
};

/**
 * Export an image
 * Export an image
 */
export const imageGetLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ImageGetLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<ImageGetLibpodResponses, ImageGetLibpodErrors, ThrowOnError>({
    url: '/libpod/images/{name}/get',
    ...options,
  });
};

/**
 * History of an image
 * Return parent layers of an image.
 */
export const imageHistoryLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ImageHistoryLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<ImageHistoryLibpodResponses, ImageHistoryLibpodErrors, ThrowOnError>({
    url: '/libpod/images/{name}/history',
    ...options,
  });
};

/**
 * Inspect an image
 * Obtain low-level information about an image
 */
export const imageInspectLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ImageInspectLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<ImageInspectLibpodResponses, ImageInspectLibpodErrors, ThrowOnError>({
    url: '/libpod/images/{name}/json',
    ...options,
  });
};

/**
 * Push Image
 * Push an image to a container registry
 */
export const imagePushLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ImagePushLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<ImagePushLibpodResponses, ImagePushLibpodErrors, ThrowOnError>({
    url: '/libpod/images/{name}/push',
    ...options,
  });
};

/**
 * Resolve an image (short) name
 * Resolve the passed image name to a list of fully-qualified images referring to container registries.
 */
export const imageResolveLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ImageResolveLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<ImageResolveLibpodResponses, ImageResolveLibpodErrors, ThrowOnError>({
    url: '/libpod/images/{name}/resolve',
    ...options,
  });
};

/**
 * Tag an image
 * Tag an image so that it becomes part of a repository.
 */
export const imageTagLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ImageTagLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<ImageTagLibpodResponses, ImageTagLibpodErrors, ThrowOnError>({
    url: '/libpod/images/{name}/tag',
    ...options,
  });
};

/**
 * Image tree
 * Retrieve the image tree for the provided image name or ID
 */
export const imageTreeLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ImageTreeLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<ImageTreeLibpodResponses, ImageTreeLibpodErrors, ThrowOnError>({
    url: '/libpod/images/{name}/tree',
    ...options,
  });
};

/**
 * Untag an image
 * Untag an image. If not repo and tag are specified, all tags are removed from the image.
 */
export const imageUntagLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ImageUntagLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<ImageUntagLibpodResponses, ImageUntagLibpodErrors, ThrowOnError>({
    url: '/libpod/images/{name}/untag',
    ...options,
  });
};

/**
 * Export multiple images
 * Export multiple images into a single object. Only `docker-archive` is currently supported.
 */
export const imageExportLibpod = <ThrowOnError extends boolean = false>(
  options?: Options<ImageExportLibpodData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<ImageExportLibpodResponses, ImageExportLibpodErrors, ThrowOnError>({
    querySerializer: {
      array: {
        explode: false,
        style: 'form',
      },
    },
    url: '/libpod/images/export',
    ...options,
  });
};

/**
 * Import image
 * Import a previously exported tarball as an image.
 */
export const imageImportLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ImageImportLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<ImageImportLibpodResponses, ImageImportLibpodErrors, ThrowOnError>({
    querySerializer: {
      array: {
        explode: false,
        style: 'form',
      },
    },
    url: '/libpod/images/import',
    ...options,
    headers: {
      'Content-Type': 'application/x-tar',
      ...options.headers,
    },
  });
};

/**
 * List Images
 * Returns a list of images on the server
 */
export const imageListLibpod = <ThrowOnError extends boolean = false>(
  options?: Options<ImageListLibpodData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<ImageListLibpodResponses, ImageListLibpodErrors, ThrowOnError>({
    url: '/libpod/images/json',
    ...options,
  });
};

/**
 * Load image
 * Load an image (oci-archive or docker-archive) stream.
 */
export const imageLoadLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ImageLoadLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<ImageLoadLibpodResponses, ImageLoadLibpodErrors, ThrowOnError>({
    url: '/libpod/images/load',
    ...options,
    headers: {
      'Content-Type': 'application/x-tar',
      ...options.headers,
    },
  });
};

/**
 * Prune unused images
 * Remove images that are not being used by a container
 */
export const imagePruneLibpod = <ThrowOnError extends boolean = false>(
  options?: Options<ImagePruneLibpodData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<ImagePruneLibpodResponses, ImagePruneLibpodErrors, ThrowOnError>({
    url: '/libpod/images/prune',
    ...options,
  });
};

/**
 * Pull images
 * Pull one or more images from a container registry.
 */
export const imagePullLibpod = <ThrowOnError extends boolean = false>(
  options?: Options<ImagePullLibpodData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<ImagePullLibpodResponses, ImagePullLibpodErrors, ThrowOnError>({
    url: '/libpod/images/pull',
    ...options,
  });
};

/**
 * Remove one or more images from the storage.
 * Remove one or more images from the storage.
 */
export const imageDeleteAllLibpod = <ThrowOnError extends boolean = false>(
  options?: Options<ImageDeleteAllLibpodData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).delete<
    ImageDeleteAllLibpodResponses,
    ImageDeleteAllLibpodErrors,
    ThrowOnError
  >({
    querySerializer: {
      array: {
        explode: false,
        style: 'form',
      },
    },
    url: '/libpod/images/remove',
    ...options,
  });
};

/**
 * Copy an image from one host to another
 * Copy an image from one host to another
 */
export const imageScpLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ImageScpLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<ImageScpLibpodResponses, ImageScpLibpodErrors, ThrowOnError>({
    url: '/libpod/images/scp/{name}',
    ...options,
  });
};

/**
 * Search images
 * Search registries for images
 */
export const imageSearchLibpod = <ThrowOnError extends boolean = false>(
  options?: Options<ImageSearchLibpodData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<ImageSearchLibpodResponses, ImageSearchLibpodErrors, ThrowOnError>({
    url: '/libpod/images/search',
    ...options,
  });
};

/**
 * Get info
 * Returns information on the system and libpod configuration
 */
export const systemInfoLibpod = <ThrowOnError extends boolean = false>(
  options?: Options<SystemInfoLibpodData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<SystemInfoLibpodResponses, SystemInfoLibpodErrors, ThrowOnError>({
    url: '/libpod/info',
    ...options,
  });
};

/**
 * Apply a podman workload or Kubernetes YAML file.
 * Deploy a podman container, pod, volume, or Kubernetes yaml to a Kubernetes cluster.
 */
export const kubeApplyLibpod = <ThrowOnError extends boolean = false>(
  options?: Options<KubeApplyLibpodData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<KubeApplyLibpodResponses, KubeApplyLibpodErrors, ThrowOnError>({
    url: '/libpod/kube/apply',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Delete manifest list
 * Delete named manifest list
 *
 * As of v4.0.0
 *
 */
export const manifestDeleteLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ManifestDeleteLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    ManifestDeleteLibpodResponses,
    ManifestDeleteLibpodErrors,
    ThrowOnError
  >({
    url: '/libpod/manifests/{name}',
    ...options,
  });
};

/**
 * Create
 * Create a manifest list
 */
export const manifestCreateLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ManifestCreateLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ManifestCreateLibpodResponses,
    ManifestCreateLibpodErrors,
    ThrowOnError
  >({
    url: '/libpod/manifests/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Modify manifest list
 * Add/Remove an image(s) to a manifest list
 *
 * Note: operations are not atomic when multiple Images are provided.
 *
 * As of v4.0.0
 *
 */
export const manifestModifyLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ManifestModifyLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<ManifestModifyLibpodResponses, ManifestModifyLibpodErrors, ThrowOnError>(
    {
      url: '/libpod/manifests/{name}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    }
  );
};

/**
 * Add image
 * Add an image to a manifest list
 *
 * Deprecated: As of 4.0.0 use ManifestModifyLibpod instead
 *
 */
export const manifestAddLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ManifestAddLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<ManifestAddLibpodResponses, ManifestAddLibpodErrors, ThrowOnError>({
    url: '/libpod/manifests/{name}/add',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Exists
 * Check if manifest list exists
 *
 * Note: There is no contract that the manifest list will exist for a follow-on operation
 *
 */
export const manifestExistsLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ManifestExistsLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<ManifestExistsLibpodResponses, ManifestExistsLibpodErrors, ThrowOnError>(
    {
      url: '/libpod/manifests/{name}/exists',
      ...options,
    }
  );
};

/**
 * Inspect
 * Display attributes of given manifest list
 */
export const manifestInspectLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ManifestInspectLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ManifestInspectLibpodResponses,
    ManifestInspectLibpodErrors,
    ThrowOnError
  >({
    url: '/libpod/manifests/{name}/json',
    ...options,
  });
};

/**
 * Push manifest to registry
 * Push a manifest list or image index to a registry
 *
 * Deprecated: As of 4.0.0 use ManifestPushLibpod instead
 *
 */
export const manifestPushV3Libpod = <ThrowOnError extends boolean = false>(
  options: Options<ManifestPushV3LibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ManifestPushV3LibpodResponses,
    ManifestPushV3LibpodErrors,
    ThrowOnError
  >({
    url: '/libpod/manifests/{name}/push',
    ...options,
  });
};

/**
 * Push manifest list to registry
 * Push a manifest list or image index to the named registry
 *
 * As of v4.0.0
 *
 */
export const manifestPushLibpod = <ThrowOnError extends boolean = false>(
  options: Options<ManifestPushLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<ManifestPushLibpodResponses, ManifestPushLibpodErrors, ThrowOnError>({
    querySerializer: {
      array: {
        explode: false,
        style: 'form',
      },
    },
    url: '/libpod/manifests/{name}/registry/{destination}',
    ...options,
  });
};

/**
 * Remove a network
 * Remove a configured network
 */
export const networkDeleteLibpod = <ThrowOnError extends boolean = false>(
  options: Options<NetworkDeleteLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    NetworkDeleteLibpodResponses,
    NetworkDeleteLibpodErrors,
    ThrowOnError
  >({
    url: '/libpod/networks/{name}',
    ...options,
  });
};

/**
 * Connect container to network
 * Connect a container to a network.
 */
export const networkConnectLibpod = <ThrowOnError extends boolean = false>(
  options: Options<NetworkConnectLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    NetworkConnectLibpodResponses,
    NetworkConnectLibpodErrors,
    ThrowOnError
  >({
    url: '/libpod/networks/{name}/connect',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Disconnect container from network
 * Disconnect a container from a network.
 */
export const networkDisconnectLibpod = <ThrowOnError extends boolean = false>(
  options: Options<NetworkDisconnectLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    NetworkDisconnectLibpodResponses,
    NetworkDisconnectLibpodErrors,
    ThrowOnError
  >({
    url: '/libpod/networks/{name}/disconnect',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Network exists
 * Check if network exists
 */
export const networkExistsLibpod = <ThrowOnError extends boolean = false>(
  options: Options<NetworkExistsLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<NetworkExistsLibpodResponses, NetworkExistsLibpodErrors, ThrowOnError>({
    url: '/libpod/networks/{name}/exists',
    ...options,
  });
};

/**
 * Inspect a network
 * Display configuration for a network.
 *
 */
export const networkInspectLibpod = <ThrowOnError extends boolean = false>(
  options: Options<NetworkInspectLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<NetworkInspectLibpodResponses, NetworkInspectLibpodErrors, ThrowOnError>(
    {
      url: '/libpod/networks/{name}/json',
      ...options,
    }
  );
};

/**
 * Update existing podman network
 * Update existing podman network
 */
export const networkUpdateLibpod = <ThrowOnError extends boolean = false>(
  options: Options<NetworkUpdateLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<NetworkUpdateLibpodResponses, NetworkUpdateLibpodErrors, ThrowOnError>({
    url: '/libpod/networks/{name}/update',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Create network
 * Create a new network configuration
 */
export const networkCreateLibpod = <ThrowOnError extends boolean = false>(
  options?: Options<NetworkCreateLibpodData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<NetworkCreateLibpodResponses, NetworkCreateLibpodErrors, ThrowOnError>(
    {
      url: '/libpod/networks/create',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers,
      },
    }
  );
};

/**
 * List networks
 * Display summary of network configurations.
 * - In a 200 response, all of the fields named Bytes are returned as a Base64 encoded string.
 *
 */
export const networkListLibpod = <ThrowOnError extends boolean = false>(
  options?: Options<NetworkListLibpodData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<NetworkListLibpodResponses, NetworkListLibpodErrors, ThrowOnError>({
    url: '/libpod/networks/json',
    ...options,
  });
};

/**
 * Delete unused networks
 * Remove networks that do not have containers
 */
export const networkPruneLibpod = <ThrowOnError extends boolean = false>(
  options?: Options<NetworkPruneLibpodData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<NetworkPruneLibpodResponses, NetworkPruneLibpodErrors, ThrowOnError>({
    url: '/libpod/networks/prune',
    ...options,
  });
};

/**
 * Remove resources created from kube play
 * Tears down pods, secrets, and volumes defined in a YAML file
 */
export const playKubeDownLibpod = <ThrowOnError extends boolean = false>(
  options?: Options<PlayKubeDownLibpodData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).delete<PlayKubeDownLibpodResponses, PlayKubeDownLibpodErrors, ThrowOnError>(
    {
      url: '/libpod/play/kube',
      ...options,
    }
  );
};

/**
 * Play a Kubernetes YAML file.
 * Create and run pods based on a Kubernetes YAML file.
 *
 * ### Content-Type
 *
 * Then endpoint support two Content-Type
 * - `plain/text` for yaml format
 * - `application/x-tar` for sending context(s) required for building images
 *
 * #### Tar format
 *
 * The tar format must contain a `play.yaml` file at the root that will be used.
 * If the file format requires context to build an image, it uses the image name and
 * check for corresponding folder.
 *
 * For example, the client sends a tar file with the following structure:
 *
 * ```
 * └── content.tar
 * ├── play.yaml
 * └── foobar/
 * └── Containerfile
 * ```
 *
 * The `play.yaml` is the following, the `foobar` image means we are looking for a context with this name.
 * ```
 * apiVersion: v1
 * kind: Pod
 * metadata:
 * name: demo-build-remote
 * spec:
 * containers:
 * - name: container
 * image: foobar
 * ```
 *
 */
export const playKubeLibpod = <ThrowOnError extends boolean = false>(
  options?: Options<PlayKubeLibpodData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<PlayKubeLibpodResponses, PlayKubeLibpodErrors, ThrowOnError>({
    querySerializer: {
      array: {
        explode: false,
        style: 'form',
      },
    },
    url: '/libpod/play/kube',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Remove pod
 */
export const podDeleteLibpod = <ThrowOnError extends boolean = false>(
  options: Options<PodDeleteLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<PodDeleteLibpodResponses, PodDeleteLibpodErrors, ThrowOnError>({
    url: '/libpod/pods/{name}',
    ...options,
  });
};

/**
 * Pod exists
 * Check if a pod exists by name or ID
 */
export const podExistsLibpod = <ThrowOnError extends boolean = false>(
  options: Options<PodExistsLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<PodExistsLibpodResponses, PodExistsLibpodErrors, ThrowOnError>({
    url: '/libpod/pods/{name}/exists',
    ...options,
  });
};

/**
 * Inspect pod
 */
export const podInspectLibpod = <ThrowOnError extends boolean = false>(
  options: Options<PodInspectLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<PodInspectLibpodResponses, PodInspectLibpodErrors, ThrowOnError>({
    url: '/libpod/pods/{name}/json',
    ...options,
  });
};

/**
 * Kill a pod
 */
export const podKillLibpod = <ThrowOnError extends boolean = false>(
  options: Options<PodKillLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<PodKillLibpodResponses, PodKillLibpodErrors, ThrowOnError>({
    url: '/libpod/pods/{name}/kill',
    ...options,
  });
};

/**
 * Pause a pod
 * Pause a pod
 */
export const podPauseLibpod = <ThrowOnError extends boolean = false>(
  options: Options<PodPauseLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<PodPauseLibpodResponses, PodPauseLibpodErrors, ThrowOnError>({
    url: '/libpod/pods/{name}/pause',
    ...options,
  });
};

/**
 * Restart a pod
 */
export const podRestartLibpod = <ThrowOnError extends boolean = false>(
  options: Options<PodRestartLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<PodRestartLibpodResponses, PodRestartLibpodErrors, ThrowOnError>({
    url: '/libpod/pods/{name}/restart',
    ...options,
  });
};

/**
 * Start a pod
 */
export const podStartLibpod = <ThrowOnError extends boolean = false>(
  options: Options<PodStartLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<PodStartLibpodResponses, PodStartLibpodErrors, ThrowOnError>({
    url: '/libpod/pods/{name}/start',
    ...options,
  });
};

/**
 * Stop a pod
 */
export const podStopLibpod = <ThrowOnError extends boolean = false>(
  options: Options<PodStopLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<PodStopLibpodResponses, PodStopLibpodErrors, ThrowOnError>({
    url: '/libpod/pods/{name}/stop',
    ...options,
  });
};

/**
 * List processes
 * List processes running inside a pod
 */
export const podTopLibpod = <ThrowOnError extends boolean = false>(
  options: Options<PodTopLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<PodTopLibpodResponses, PodTopLibpodErrors, ThrowOnError>({
    url: '/libpod/pods/{name}/top',
    ...options,
  });
};

/**
 * Unpause a pod
 */
export const podUnpauseLibpod = <ThrowOnError extends boolean = false>(
  options: Options<PodUnpauseLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<PodUnpauseLibpodResponses, PodUnpauseLibpodErrors, ThrowOnError>({
    url: '/libpod/pods/{name}/unpause',
    ...options,
  });
};

/**
 * Create a pod
 */
export const podCreateLibpod = <ThrowOnError extends boolean = false>(
  options?: Options<PodCreateLibpodData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<PodCreateLibpodResponses, PodCreateLibpodErrors, ThrowOnError>({
    url: '/libpod/pods/create',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * List pods
 */
export const podListLibpod = <ThrowOnError extends boolean = false>(
  options?: Options<PodListLibpodData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<PodListLibpodResponses, PodListLibpodErrors, ThrowOnError>({
    url: '/libpod/pods/json',
    ...options,
  });
};

/**
 * Prune unused pods
 */
export const podPruneLibpod = <ThrowOnError extends boolean = false>(
  options?: Options<PodPruneLibpodData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<PodPruneLibpodResponses, PodPruneLibpodErrors, ThrowOnError>({
    url: '/libpod/pods/prune',
    ...options,
  });
};

/**
 * Statistics for one or more pods
 * Display a live stream of resource usage statistics for the containers in one or more pods
 */
export const podStatsAllLibpod = <ThrowOnError extends boolean = false>(
  options?: Options<PodStatsAllLibpodData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<PodStatsAllLibpodResponses, PodStatsAllLibpodErrors, ThrowOnError>({
    querySerializer: {
      array: {
        explode: false,
        style: 'form',
      },
    },
    url: '/libpod/pods/stats',
    ...options,
  });
};

/**
 * Remove secret
 */
export const secretDeleteLibpod = <ThrowOnError extends boolean = false>(
  options: Options<SecretDeleteLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<SecretDeleteLibpodResponses, SecretDeleteLibpodErrors, ThrowOnError>({
    url: '/libpod/secrets/{name}',
    ...options,
  });
};

/**
 * Secret exists
 */
export const secretExistsLibpod = <ThrowOnError extends boolean = false>(
  options: Options<SecretExistsLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<SecretExistsLibpodResponses, SecretExistsLibpodErrors, ThrowOnError>({
    url: '/libpod/secrets/{name}/exists',
    ...options,
  });
};

/**
 * Inspect secret
 */
export const secretInspectLibpod = <ThrowOnError extends boolean = false>(
  options: Options<SecretInspectLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<SecretInspectLibpodResponses, SecretInspectLibpodErrors, ThrowOnError>({
    url: '/libpod/secrets/{name}/json',
    ...options,
  });
};

/**
 * Create a secret
 */
export const secretCreateLibpod = <ThrowOnError extends boolean = false>(
  options: Options<SecretCreateLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<SecretCreateLibpodResponses, SecretCreateLibpodErrors, ThrowOnError>({
    url: '/libpod/secrets/create',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List secrets
 * Returns a list of secrets
 */
export const secretListLibpod = <ThrowOnError extends boolean = false>(
  options?: Options<SecretListLibpodData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<SecretListLibpodResponses, SecretListLibpodErrors, ThrowOnError>({
    url: '/libpod/secrets/json',
    ...options,
  });
};

/**
 * Performs consistency checks on storage, optionally removing items which fail checks
 */
export const systemCheckLibpod = <ThrowOnError extends boolean = false>(
  options?: Options<SystemCheckLibpodData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<SystemCheckLibpodResponses, SystemCheckLibpodErrors, ThrowOnError>({
    url: '/libpod/system/check',
    ...options,
  });
};

/**
 * Show disk usage
 * Return information about disk usage for containers, images, and volumes
 */
export const systemDataUsageLibpod = <ThrowOnError extends boolean = false>(
  options?: Options<SystemDataUsageLibpodData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    SystemDataUsageLibpodResponses,
    SystemDataUsageLibpodErrors,
    ThrowOnError
  >({
    url: '/libpod/system/df',
    ...options,
  });
};

/**
 * Prune unused data
 */
export const systemPruneLibpod = <ThrowOnError extends boolean = false>(
  options?: Options<SystemPruneLibpodData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<SystemPruneLibpodResponses, SystemPruneLibpodErrors, ThrowOnError>({
    url: '/libpod/system/prune',
    ...options,
  });
};

/**
 * Component Version information
 */
export const systemVersionLibpod = <ThrowOnError extends boolean = false>(
  options?: Options<SystemVersionLibpodData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<SystemVersionLibpodResponses, unknown, ThrowOnError>({
    url: '/libpod/version',
    ...options,
  });
};

/**
 * Remove volume
 */
export const volumeDeleteLibpod = <ThrowOnError extends boolean = false>(
  options: Options<VolumeDeleteLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<VolumeDeleteLibpodResponses, VolumeDeleteLibpodErrors, ThrowOnError>({
    url: '/libpod/volumes/{name}',
    ...options,
  });
};

/**
 * Volume exists
 * Check if a volume exists
 */
export const volumeExistsLibpod = <ThrowOnError extends boolean = false>(
  options: Options<VolumeExistsLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<VolumeExistsLibpodResponses, VolumeExistsLibpodErrors, ThrowOnError>({
    url: '/libpod/volumes/{name}/exists',
    ...options,
  });
};

/**
 * Inspect volume
 */
export const volumeInspectLibpod = <ThrowOnError extends boolean = false>(
  options: Options<VolumeInspectLibpodData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<VolumeInspectLibpodResponses, VolumeInspectLibpodErrors, ThrowOnError>({
    url: '/libpod/volumes/{name}/json',
    ...options,
  });
};

/**
 * Create a volume
 */
export const volumeCreateLibpod = <ThrowOnError extends boolean = false>(
  options?: Options<VolumeCreateLibpodData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<VolumeCreateLibpodResponses, VolumeCreateLibpodErrors, ThrowOnError>({
    url: '/libpod/volumes/create',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * List volumes
 * Returns a list of volumes
 */
export const volumeListLibpod = <ThrowOnError extends boolean = false>(
  options?: Options<VolumeListLibpodData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<VolumeListLibpodResponses, VolumeListLibpodErrors, ThrowOnError>({
    url: '/libpod/volumes/json',
    ...options,
  });
};

/**
 * Prune volumes
 */
export const volumePruneLibpod = <ThrowOnError extends boolean = false>(
  options?: Options<VolumePruneLibpodData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<VolumePruneLibpodResponses, VolumePruneLibpodErrors, ThrowOnError>({
    url: '/libpod/volumes/prune',
    ...options,
  });
};

/**
 * List networks
 * Display summary of network configurations
 */
export const networkList = <ThrowOnError extends boolean = false>(options?: Options<NetworkListData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<NetworkListResponses, NetworkListErrors, ThrowOnError>({
    url: '/networks',
    ...options,
  });
};

/**
 * Remove a network
 * Remove a network
 */
export const networkDelete = <ThrowOnError extends boolean = false>(
  options: Options<NetworkDeleteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<NetworkDeleteResponses, NetworkDeleteErrors, ThrowOnError>({
    url: '/networks/{name}',
    ...options,
  });
};

/**
 * Inspect a network
 * Display low level configuration network
 */
export const networkInspect = <ThrowOnError extends boolean = false>(
  options: Options<NetworkInspectData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<NetworkInspectResponses, NetworkInspectErrors, ThrowOnError>({
    url: '/networks/{name}',
    ...options,
  });
};

/**
 * Connect container to network
 * Connect a container to a network
 */
export const networkConnect = <ThrowOnError extends boolean = false>(
  options: Options<NetworkConnectData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<NetworkConnectResponses, NetworkConnectErrors, ThrowOnError>({
    url: '/networks/{name}/connect',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Disconnect container from network
 * Disconnect a container from a network
 */
export const networkDisconnect = <ThrowOnError extends boolean = false>(
  options: Options<NetworkDisconnectData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<NetworkDisconnectResponses, NetworkDisconnectErrors, ThrowOnError>({
    url: '/networks/{name}/disconnect',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Create network
 * Create a network configuration
 */
export const networkCreate = <ThrowOnError extends boolean = false>(
  options?: Options<NetworkCreateData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<NetworkCreateResponses, NetworkCreateErrors, ThrowOnError>({
    url: '/networks/create',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Delete unused networks
 * Remove networks that do not have containers
 */
export const networkPrune = <ThrowOnError extends boolean = false>(
  options?: Options<NetworkPruneData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<NetworkPruneResponses, NetworkPruneErrors, ThrowOnError>({
    url: '/networks/prune',
    ...options,
  });
};

/**
 * List secrets
 * Returns a list of secrets
 */
export const secretList = <ThrowOnError extends boolean = false>(options?: Options<SecretListData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<SecretListResponses, SecretListErrors, ThrowOnError>({
    url: '/secrets',
    ...options,
  });
};

/**
 * Remove secret
 */
export const secretDelete = <ThrowOnError extends boolean = false>(
  options: Options<SecretDeleteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<SecretDeleteResponses, SecretDeleteErrors, ThrowOnError>({
    url: '/secrets/{name}',
    ...options,
  });
};

/**
 * Inspect secret
 */
export const secretInspect = <ThrowOnError extends boolean = false>(
  options: Options<SecretInspectData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<SecretInspectResponses, SecretInspectErrors, ThrowOnError>({
    url: '/secrets/{name}',
    ...options,
  });
};

/**
 * Create a secret
 */
export const secretCreate = <ThrowOnError extends boolean = false>(
  options?: Options<SecretCreateData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<SecretCreateResponses, SecretCreateErrors, ThrowOnError>({
    url: '/secrets/create',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Show disk usage
 * Return information about disk usage for containers, images, and volumes
 */
export const systemDataUsage = <ThrowOnError extends boolean = false>(
  options?: Options<SystemDataUsageData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<SystemDataUsageResponses, SystemDataUsageErrors, ThrowOnError>({
    url: '/system/df',
    ...options,
  });
};

/**
 * Component Version information
 */
export const systemVersion = <ThrowOnError extends boolean = false>(
  options?: Options<SystemVersionData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<SystemVersionResponses, unknown, ThrowOnError>({
    url: '/version',
    ...options,
  });
};

/**
 * List volumes
 * Returns a list of volume
 */
export const volumeList = <ThrowOnError extends boolean = false>(options?: Options<VolumeListData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<VolumeListResponses, VolumeListErrors, ThrowOnError>({
    url: '/volumes',
    ...options,
  });
};

/**
 * Remove volume
 */
export const volumeDelete = <ThrowOnError extends boolean = false>(
  options: Options<VolumeDeleteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<VolumeDeleteResponses, VolumeDeleteErrors, ThrowOnError>({
    url: '/volumes/{name}',
    ...options,
  });
};

/**
 * Inspect volume
 */
export const volumeInspect = <ThrowOnError extends boolean = false>(
  options: Options<VolumeInspectData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<VolumeInspectResponses, VolumeInspectErrors, ThrowOnError>({
    url: '/volumes/{name}',
    ...options,
  });
};

/**
 * Create a volume
 */
export const volumeCreate = <ThrowOnError extends boolean = false>(
  options?: Options<VolumeCreateData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<VolumeCreateResponses, VolumeCreateErrors, ThrowOnError>({
    url: '/volumes/create',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Prune volumes
 */
export const volumePrune = <ThrowOnError extends boolean = false>(options?: Options<VolumePruneData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<VolumePruneResponses, VolumePruneErrors, ThrowOnError>({
    url: '/volumes/prune',
    ...options,
  });
};
