import { asc, desc, eq } from 'drizzle-orm';
import { createInsertSchema, createSelectSchema } from 'drizzle-zod';

import db from '@backend/database';
import { chatsTable } from '@backend/database/schema/chat';
import { messagesTable } from '@backend/database/schema/messages';

// Database schemas
export const insertChatSchema = createInsertSchema(chatsTable);
export const selectChatSchema = createSelectSchema(chatsTable);
export const insertMessageSchema = createInsertSchema(messagesTable);
export const selectMessageSchema = createSelectSchema(messagesTable);

export default class Chat {
  static async getAllChats() {
    const chats = await db.select().from(chatsTable).orderBy(desc(chatsTable.createdAt)); // Most recent chats first

    return Promise.all(
      chats.map(async (chat) => ({
        ...chat,
        messages: await this.getChatMessages(chat.id),
      }))
    );
  }

  static async getChatById(id: number) {
    const results = await db.select().from(chatsTable).where(eq(chatsTable.id, id)).limit(1); // Ensure we only get one result

    const chat = results[0];
    if (!chat) return null;

    return {
      ...chat,
      messages: await this.getChatMessages(chat.id),
    };
  }

  static async createChat() {
    // The sessionId is auto-generated by SQLite using the UUID expression
    // defined in the schema (see chat.ts schema file)
    const [chat] = await db
      .insert(chatsTable)
      .values({}) // No required fields, all handled by defaults
      .returning(); // SQLite returns the inserted row

    return {
      ...chat,
      messages: [], // Empty messages array
    };
  }

  static async updateChat(id: number, data: { title?: string | null }) {
    // First check if the chat exists
    const chat = await this.getChatById(id);
    if (!chat) {
      return null; // Will trigger 404 in the route handler
    }

    const [updatedChat] = await db
      .update(chatsTable)
      .set({
        title: data.title,
        // Manually update the timestamp since SQLite doesn't have ON UPDATE
        updatedAt: new Date().toISOString(),
      })
      .where(eq(chatsTable.id, id))
      .returning();

    return {
      ...updatedChat,
      messages: [], // Empty messages array
    };
  }

  static async deleteChat(id: number): Promise<void> {
    // Note: Related chat_interactions will be cascade deleted
    // when that table is added (foreign key constraint)
    await db.delete(chatsTable).where(eq(chatsTable.id, id));
  }

  static async saveMessages(sessionId: string, messages: any[]): Promise<void> {
    // First, find the chat by session ID
    const [chat] = await db.select().from(chatsTable).where(eq(chatsTable.sessionId, sessionId)).limit(1);

    if (!chat) {
      console.error(`Chat not found for session ID: ${sessionId}`);
      return;
    }

    // Clear existing messages for this chat to avoid duplicates
    await db.delete(messagesTable).where(eq(messagesTable.chatId, chat.id));

    // Save each message
    for (const message of messages) {
      await db.insert(messagesTable).values({
        chatId: chat.id,
        role: message.role,
        content: JSON.stringify(message),
      });
    }
  }

  static async getChatMessages(chatId: number): Promise<any[]> {
    const messages = await db
      .select()
      .from(messagesTable)
      .where(eq(messagesTable.chatId, chatId))
      .orderBy(asc(messagesTable.createdAt)); // Order by creation time ascending
    return messages.map((msg) => JSON.parse(msg.content));
  }
}
