// This file is auto-generated by @hey-api/openapi-ts
import type { Client, Options as ClientOptions, TDataShape } from './client';
import { client as _heyApiClient } from './client.gen';
import type {
  ClearMcpRequestLogsData,
  ClearMcpRequestLogsErrors,
  ClearMcpRequestLogsResponses,
  ConnectExternalMcpClientData,
  ConnectExternalMcpClientErrors,
  ConnectExternalMcpClientResponses,
  CreateChatData,
  CreateChatErrors,
  CreateChatResponses,
  DeleteChatData,
  DeleteChatErrors,
  DeleteChatResponses,
  DisconnectExternalMcpClientData,
  DisconnectExternalMcpClientErrors,
  DisconnectExternalMcpClientResponses,
  GetAllChatsData,
  GetAllChatsErrors,
  GetAllChatsResponses,
  GetConnectedExternalMcpClientsData,
  GetConnectedExternalMcpClientsErrors,
  GetConnectedExternalMcpClientsResponses,
  GetInstalledMcpServersData,
  GetInstalledMcpServersErrors,
  GetInstalledMcpServersResponses,
  GetMcpConnectorCatalogData,
  GetMcpConnectorCatalogErrors,
  GetMcpConnectorCatalogResponses,
  GetMcpRequestLogByIdData,
  GetMcpRequestLogByIdErrors,
  GetMcpRequestLogByIdResponses,
  GetMcpRequestLogStatsData,
  GetMcpRequestLogStatsErrors,
  GetMcpRequestLogStatsResponses,
  GetMcpRequestLogsData,
  GetMcpRequestLogsErrors,
  GetMcpRequestLogsResponses,
  GetSupportedExternalMcpClientsData,
  GetSupportedExternalMcpClientsErrors,
  GetSupportedExternalMcpClientsResponses,
  InstallMcpServerFromCatalogData,
  InstallMcpServerFromCatalogErrors,
  InstallMcpServerFromCatalogResponses,
  StartMcpServerOauthData,
  StartMcpServerOauthErrors,
  StartMcpServerOauthResponses,
  UninstallMcpServerData,
  UninstallMcpServerErrors,
  UninstallMcpServerResponses,
  UpdateChatData,
  UpdateChatErrors,
  UpdateChatResponses,
} from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<
  TData,
  ThrowOnError
> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export const getAllChats = <ThrowOnError extends boolean = false>(options?: Options<GetAllChatsData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetAllChatsResponses, GetAllChatsErrors, ThrowOnError>({
    url: '/api/chat',
    ...options,
  });
};

export const createChat = <ThrowOnError extends boolean = false>(options: Options<CreateChatData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<CreateChatResponses, CreateChatErrors, ThrowOnError>({
    url: '/api/chat',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

export const deleteChat = <ThrowOnError extends boolean = false>(options: Options<DeleteChatData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).delete<DeleteChatResponses, DeleteChatErrors, ThrowOnError>({
    url: '/api/chat/{id}',
    ...options,
  });
};

export const updateChat = <ThrowOnError extends boolean = false>(options: Options<UpdateChatData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).patch<UpdateChatResponses, UpdateChatErrors, ThrowOnError>({
    url: '/api/chat/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

export const getConnectedExternalMcpClients = <ThrowOnError extends boolean = false>(
  options?: Options<GetConnectedExternalMcpClientsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetConnectedExternalMcpClientsResponses,
    GetConnectedExternalMcpClientsErrors,
    ThrowOnError
  >({
    url: '/api/external_mcp_client',
    ...options,
  });
};

export const connectExternalMcpClient = <ThrowOnError extends boolean = false>(
  options: Options<ConnectExternalMcpClientData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ConnectExternalMcpClientResponses,
    ConnectExternalMcpClientErrors,
    ThrowOnError
  >({
    url: '/api/external_mcp_client/connect',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

export const getSupportedExternalMcpClients = <ThrowOnError extends boolean = false>(
  options?: Options<GetSupportedExternalMcpClientsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetSupportedExternalMcpClientsResponses,
    GetSupportedExternalMcpClientsErrors,
    ThrowOnError
  >({
    url: '/api/external_mcp_client/supported',
    ...options,
  });
};

export const disconnectExternalMcpClient = <ThrowOnError extends boolean = false>(
  options: Options<DisconnectExternalMcpClientData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DisconnectExternalMcpClientResponses,
    DisconnectExternalMcpClientErrors,
    ThrowOnError
  >({
    url: '/api/external_mcp_client/{client_name}/disconnect',
    ...options,
  });
};

export const clearMcpRequestLogs = <ThrowOnError extends boolean = false>(
  options?: Options<ClearMcpRequestLogsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).delete<
    ClearMcpRequestLogsResponses,
    ClearMcpRequestLogsErrors,
    ThrowOnError
  >({
    url: '/api/mcp_request_log',
    ...options,
  });
};

export const getMcpRequestLogs = <ThrowOnError extends boolean = false>(
  options?: Options<GetMcpRequestLogsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetMcpRequestLogsResponses, GetMcpRequestLogsErrors, ThrowOnError>({
    url: '/api/mcp_request_log',
    ...options,
  });
};

export const getMcpRequestLogStats = <ThrowOnError extends boolean = false>(
  options?: Options<GetMcpRequestLogStatsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetMcpRequestLogStatsResponses,
    GetMcpRequestLogStatsErrors,
    ThrowOnError
  >({
    url: '/api/mcp_request_log/stats',
    ...options,
  });
};

export const getMcpRequestLogById = <ThrowOnError extends boolean = false>(
  options: Options<GetMcpRequestLogByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<GetMcpRequestLogByIdResponses, GetMcpRequestLogByIdErrors, ThrowOnError>(
    {
      url: '/api/mcp_request_log/{request_id}',
      ...options,
    }
  );
};

export const getInstalledMcpServers = <ThrowOnError extends boolean = false>(
  options?: Options<GetInstalledMcpServersData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetInstalledMcpServersResponses,
    GetInstalledMcpServersErrors,
    ThrowOnError
  >({
    url: '/api/mcp_server',
    ...options,
  });
};

export const getMcpConnectorCatalog = <ThrowOnError extends boolean = false>(
  options?: Options<GetMcpConnectorCatalogData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetMcpConnectorCatalogResponses,
    GetMcpConnectorCatalogErrors,
    ThrowOnError
  >({
    url: '/api/mcp_server/catalog',
    ...options,
  });
};

export const installMcpServerFromCatalog = <ThrowOnError extends boolean = false>(
  options: Options<InstallMcpServerFromCatalogData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    InstallMcpServerFromCatalogResponses,
    InstallMcpServerFromCatalogErrors,
    ThrowOnError
  >({
    url: '/api/mcp_server/catalog/install',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

export const startMcpServerOauth = <ThrowOnError extends boolean = false>(
  options: Options<StartMcpServerOauthData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<StartMcpServerOauthResponses, StartMcpServerOauthErrors, ThrowOnError>({
    url: '/api/mcp_server/start_oauth',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

export const uninstallMcpServer = <ThrowOnError extends boolean = false>(
  options: Options<UninstallMcpServerData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<UninstallMcpServerResponses, UninstallMcpServerErrors, ThrowOnError>({
    url: '/api/mcp_server/{mcp_server_name}',
    ...options,
  });
};
