// This file is auto-generated by @hey-api/openapi-ts
import type { Client, Options as ClientOptions, TDataShape } from './client';
import { client as _heyApiClient } from './client.gen';
import type {
  ClearMcpRequestLogsData,
  ClearMcpRequestLogsResponses,
  ConfigureCloudProviderData,
  ConfigureCloudProviderResponses,
  ConnectExternalMcpClientData,
  ConnectExternalMcpClientResponses,
  CreateChatData,
  CreateChatResponses,
  DeleteChatData,
  DeleteChatErrors,
  DeleteChatResponses,
  DeleteCloudProviderData,
  DeleteCloudProviderResponses,
  DisconnectExternalMcpClientData,
  DisconnectExternalMcpClientResponses,
  GetAvailableCloudProvidersData,
  GetAvailableCloudProvidersResponses,
  GetChatByIdData,
  GetChatByIdErrors,
  GetChatByIdResponses,
  GetChatsData,
  GetChatsResponses,
  GetCloudProviderModelsData,
  GetCloudProviderModelsResponses,
  GetConnectedExternalMcpClientsData,
  GetConnectedExternalMcpClientsResponses,
  GetMcpRequestLogByIdData,
  GetMcpRequestLogByIdErrors,
  GetMcpRequestLogByIdResponses,
  GetMcpRequestLogStatsData,
  GetMcpRequestLogStatsResponses,
  GetMcpRequestLogsData,
  GetMcpRequestLogsResponses,
  GetMcpServerLogsData,
  GetMcpServerLogsErrors,
  GetMcpServerLogsResponses,
  GetMcpServersData,
  GetMcpServersResponses,
  GetSupportedExternalMcpClientsData,
  GetSupportedExternalMcpClientsResponses,
  InstallMcpServerData,
  InstallMcpServerErrors,
  InstallMcpServerResponses,
  StartMcpServerOauthData,
  StartMcpServerOauthResponses,
  UninstallMcpServerData,
  UninstallMcpServerResponses,
  UpdateChatData,
  UpdateChatErrors,
  UpdateChatResponses,
} from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<
  TData,
  ThrowOnError
> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Get all chats
 */
export const getChats = <ThrowOnError extends boolean = false>(options?: Options<GetChatsData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetChatsResponses, unknown, ThrowOnError>({
    url: '/api/chat',
    ...options,
  });
};

/**
 * Create new chat
 */
export const createChat = <ThrowOnError extends boolean = false>(options?: Options<CreateChatData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<CreateChatResponses, unknown, ThrowOnError>({
    url: '/api/chat',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Delete chat
 */
export const deleteChat = <ThrowOnError extends boolean = false>(options: Options<DeleteChatData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).delete<DeleteChatResponses, DeleteChatErrors, ThrowOnError>({
    url: '/api/chat/{id}',
    ...options,
  });
};

/**
 * Get single chat with messages
 */
export const getChatById = <ThrowOnError extends boolean = false>(options: Options<GetChatByIdData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetChatByIdResponses, GetChatByIdErrors, ThrowOnError>({
    url: '/api/chat/{id}',
    ...options,
  });
};

/**
 * Update chat
 */
export const updateChat = <ThrowOnError extends boolean = false>(options: Options<UpdateChatData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).patch<UpdateChatResponses, UpdateChatErrors, ThrowOnError>({
    url: '/api/chat/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get all available cloud providers with configuration status
 */
export const getAvailableCloudProviders = <ThrowOnError extends boolean = false>(
  options?: Options<GetAvailableCloudProvidersData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetAvailableCloudProvidersResponses, unknown, ThrowOnError>({
    url: '/api/cloud-providers/available',
    ...options,
  });
};

/**
 * Configure a cloud provider with API key
 */
export const configureCloudProvider = <ThrowOnError extends boolean = false>(
  options: Options<ConfigureCloudProviderData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<ConfigureCloudProviderResponses, unknown, ThrowOnError>({
    url: '/api/cloud-providers',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Remove cloud provider configuration
 */
export const deleteCloudProvider = <ThrowOnError extends boolean = false>(
  options: Options<DeleteCloudProviderData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<DeleteCloudProviderResponses, unknown, ThrowOnError>({
    url: '/api/cloud-providers/{type}',
    ...options,
  });
};

/**
 * Get all available models from configured providers
 */
export const getCloudProviderModels = <ThrowOnError extends boolean = false>(
  options?: Options<GetCloudProviderModelsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetCloudProviderModelsResponses, unknown, ThrowOnError>({
    url: '/api/cloud-providers/models',
    ...options,
  });
};

/**
 * Get all connected external MCP clients
 */
export const getConnectedExternalMcpClients = <ThrowOnError extends boolean = false>(
  options?: Options<GetConnectedExternalMcpClientsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetConnectedExternalMcpClientsResponses, unknown, ThrowOnError>({
    url: '/api/external_mcp_client',
    ...options,
  });
};

/**
 * Get supported external MCP client names
 */
export const getSupportedExternalMcpClients = <ThrowOnError extends boolean = false>(
  options?: Options<GetSupportedExternalMcpClientsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetSupportedExternalMcpClientsResponses, unknown, ThrowOnError>({
    url: '/api/external_mcp_client/supported',
    ...options,
  });
};

/**
 * Connect an external MCP client
 */
export const connectExternalMcpClient = <ThrowOnError extends boolean = false>(
  options: Options<ConnectExternalMcpClientData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<ConnectExternalMcpClientResponses, unknown, ThrowOnError>({
    url: '/api/external_mcp_client/connect',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Disconnect an external MCP client
 */
export const disconnectExternalMcpClient = <ThrowOnError extends boolean = false>(
  options: Options<DisconnectExternalMcpClientData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<DisconnectExternalMcpClientResponses, unknown, ThrowOnError>({
    url: '/api/external_mcp_client/{clientName}/disconnect',
    ...options,
  });
};

/**
 * Clear MCP request logs
 */
export const clearMcpRequestLogs = <ThrowOnError extends boolean = false>(
  options: Options<ClearMcpRequestLogsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<ClearMcpRequestLogsResponses, unknown, ThrowOnError>({
    url: '/api/mcp_request_log',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get MCP request logs with filtering and pagination
 */
export const getMcpRequestLogs = <ThrowOnError extends boolean = false>(
  options?: Options<GetMcpRequestLogsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetMcpRequestLogsResponses, unknown, ThrowOnError>({
    url: '/api/mcp_request_log',
    ...options,
  });
};

/**
 * Get a single MCP request log by ID
 */
export const getMcpRequestLogById = <ThrowOnError extends boolean = false>(
  options: Options<GetMcpRequestLogByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<GetMcpRequestLogByIdResponses, GetMcpRequestLogByIdErrors, ThrowOnError>(
    {
      url: '/api/mcp_request_log/{id}',
      ...options,
    }
  );
};

/**
 * Get MCP request log statistics
 */
export const getMcpRequestLogStats = <ThrowOnError extends boolean = false>(
  options?: Options<GetMcpRequestLogStatsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetMcpRequestLogStatsResponses, unknown, ThrowOnError>({
    url: '/api/mcp_request_log/stats',
    ...options,
  });
};

/**
 * Get all installed MCP servers
 */
export const getMcpServers = <ThrowOnError extends boolean = false>(
  options?: Options<GetMcpServersData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetMcpServersResponses, unknown, ThrowOnError>({
    url: '/api/mcp_server',
    ...options,
  });
};

/**
 * Install an MCP server. Either from the catalog, or a customer server
 */
export const installMcpServer = <ThrowOnError extends boolean = false>(
  options: Options<InstallMcpServerData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<InstallMcpServerResponses, InstallMcpServerErrors, ThrowOnError>({
    url: '/api/mcp_server/install',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Uninstall MCP server
 */
export const uninstallMcpServer = <ThrowOnError extends boolean = false>(
  options: Options<UninstallMcpServerData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<UninstallMcpServerResponses, unknown, ThrowOnError>({
    url: '/api/mcp_server/{id}',
    ...options,
  });
};

/**
 * Start MCP server OAuth flow
 */
export const startMcpServerOauth = <ThrowOnError extends boolean = false>(
  options: Options<StartMcpServerOauthData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<StartMcpServerOauthResponses, unknown, ThrowOnError>({
    url: '/api/mcp_server/start_oauth',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get logs for a specific MCP server container
 */
export const getMcpServerLogs = <ThrowOnError extends boolean = false>(
  options: Options<GetMcpServerLogsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<GetMcpServerLogsResponses, GetMcpServerLogsErrors, ThrowOnError>({
    url: '/mcp_proxy/{id}/logs',
    ...options,
  });
};
