/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as LlmProvidersRouteImport } from './routes/llm-providers'
import { Route as ConnectorsRouteImport } from './routes/connectors'
import { Route as ChatRouteImport } from './routes/chat'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SettingsIndexRouteImport } from './routes/settings/index'
import { Route as SettingsOllamaRouteImport } from './routes/settings/ollama'
import { Route as SettingsMcpServersRouteImport } from './routes/settings/mcp-servers'
import { Route as SettingsMcpClientsRouteImport } from './routes/settings/mcp-clients'
import { Route as LlmProvidersOllamaRouteImport } from './routes/llm-providers/ollama'
import { Route as LlmProvidersCloudRouteImport } from './routes/llm-providers/cloud'

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const LlmProvidersRoute = LlmProvidersRouteImport.update({
  id: '/llm-providers',
  path: '/llm-providers',
  getParentRoute: () => rootRouteImport,
} as any)
const ConnectorsRoute = ConnectorsRouteImport.update({
  id: '/connectors',
  path: '/connectors',
  getParentRoute: () => rootRouteImport,
} as any)
const ChatRoute = ChatRouteImport.update({
  id: '/chat',
  path: '/chat',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsIndexRoute = SettingsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SettingsRoute,
} as any)
const SettingsOllamaRoute = SettingsOllamaRouteImport.update({
  id: '/ollama',
  path: '/ollama',
  getParentRoute: () => SettingsRoute,
} as any)
const SettingsMcpServersRoute = SettingsMcpServersRouteImport.update({
  id: '/mcp-servers',
  path: '/mcp-servers',
  getParentRoute: () => SettingsRoute,
} as any)
const SettingsMcpClientsRoute = SettingsMcpClientsRouteImport.update({
  id: '/mcp-clients',
  path: '/mcp-clients',
  getParentRoute: () => SettingsRoute,
} as any)
const LlmProvidersOllamaRoute = LlmProvidersOllamaRouteImport.update({
  id: '/ollama',
  path: '/ollama',
  getParentRoute: () => LlmProvidersRoute,
} as any)
const LlmProvidersCloudRoute = LlmProvidersCloudRouteImport.update({
  id: '/cloud',
  path: '/cloud',
  getParentRoute: () => LlmProvidersRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/chat': typeof ChatRoute
  '/connectors': typeof ConnectorsRoute
  '/llm-providers': typeof LlmProvidersRouteWithChildren
  '/settings': typeof SettingsRouteWithChildren
  '/llm-providers/cloud': typeof LlmProvidersCloudRoute
  '/llm-providers/ollama': typeof LlmProvidersOllamaRoute
  '/settings/mcp-clients': typeof SettingsMcpClientsRoute
  '/settings/mcp-servers': typeof SettingsMcpServersRoute
  '/settings/ollama': typeof SettingsOllamaRoute
  '/settings/': typeof SettingsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/chat': typeof ChatRoute
  '/connectors': typeof ConnectorsRoute
  '/llm-providers': typeof LlmProvidersRouteWithChildren
  '/llm-providers/cloud': typeof LlmProvidersCloudRoute
  '/llm-providers/ollama': typeof LlmProvidersOllamaRoute
  '/settings/mcp-clients': typeof SettingsMcpClientsRoute
  '/settings/mcp-servers': typeof SettingsMcpServersRoute
  '/settings/ollama': typeof SettingsOllamaRoute
  '/settings': typeof SettingsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/chat': typeof ChatRoute
  '/connectors': typeof ConnectorsRoute
  '/llm-providers': typeof LlmProvidersRouteWithChildren
  '/settings': typeof SettingsRouteWithChildren
  '/llm-providers/cloud': typeof LlmProvidersCloudRoute
  '/llm-providers/ollama': typeof LlmProvidersOllamaRoute
  '/settings/mcp-clients': typeof SettingsMcpClientsRoute
  '/settings/mcp-servers': typeof SettingsMcpServersRoute
  '/settings/ollama': typeof SettingsOllamaRoute
  '/settings/': typeof SettingsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/chat'
    | '/connectors'
    | '/llm-providers'
    | '/settings'
    | '/llm-providers/cloud'
    | '/llm-providers/ollama'
    | '/settings/mcp-clients'
    | '/settings/mcp-servers'
    | '/settings/ollama'
    | '/settings/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/chat'
    | '/connectors'
    | '/llm-providers'
    | '/llm-providers/cloud'
    | '/llm-providers/ollama'
    | '/settings/mcp-clients'
    | '/settings/mcp-servers'
    | '/settings/ollama'
    | '/settings'
  id:
    | '__root__'
    | '/'
    | '/chat'
    | '/connectors'
    | '/llm-providers'
    | '/settings'
    | '/llm-providers/cloud'
    | '/llm-providers/ollama'
    | '/settings/mcp-clients'
    | '/settings/mcp-servers'
    | '/settings/ollama'
    | '/settings/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ChatRoute: typeof ChatRoute
  ConnectorsRoute: typeof ConnectorsRoute
  LlmProvidersRoute: typeof LlmProvidersRouteWithChildren
  SettingsRoute: typeof SettingsRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/llm-providers': {
      id: '/llm-providers'
      path: '/llm-providers'
      fullPath: '/llm-providers'
      preLoaderRoute: typeof LlmProvidersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/connectors': {
      id: '/connectors'
      path: '/connectors'
      fullPath: '/connectors'
      preLoaderRoute: typeof ConnectorsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/chat': {
      id: '/chat'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof ChatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/': {
      id: '/settings/'
      path: '/'
      fullPath: '/settings/'
      preLoaderRoute: typeof SettingsIndexRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/settings/ollama': {
      id: '/settings/ollama'
      path: '/ollama'
      fullPath: '/settings/ollama'
      preLoaderRoute: typeof SettingsOllamaRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/settings/mcp-servers': {
      id: '/settings/mcp-servers'
      path: '/mcp-servers'
      fullPath: '/settings/mcp-servers'
      preLoaderRoute: typeof SettingsMcpServersRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/settings/mcp-clients': {
      id: '/settings/mcp-clients'
      path: '/mcp-clients'
      fullPath: '/settings/mcp-clients'
      preLoaderRoute: typeof SettingsMcpClientsRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/llm-providers/ollama': {
      id: '/llm-providers/ollama'
      path: '/ollama'
      fullPath: '/llm-providers/ollama'
      preLoaderRoute: typeof LlmProvidersOllamaRouteImport
      parentRoute: typeof LlmProvidersRoute
    }
    '/llm-providers/cloud': {
      id: '/llm-providers/cloud'
      path: '/cloud'
      fullPath: '/llm-providers/cloud'
      preLoaderRoute: typeof LlmProvidersCloudRouteImport
      parentRoute: typeof LlmProvidersRoute
    }
  }
}

interface LlmProvidersRouteChildren {
  LlmProvidersCloudRoute: typeof LlmProvidersCloudRoute
  LlmProvidersOllamaRoute: typeof LlmProvidersOllamaRoute
}

const LlmProvidersRouteChildren: LlmProvidersRouteChildren = {
  LlmProvidersCloudRoute: LlmProvidersCloudRoute,
  LlmProvidersOllamaRoute: LlmProvidersOllamaRoute,
}

const LlmProvidersRouteWithChildren = LlmProvidersRoute._addFileChildren(
  LlmProvidersRouteChildren,
)

interface SettingsRouteChildren {
  SettingsMcpClientsRoute: typeof SettingsMcpClientsRoute
  SettingsMcpServersRoute: typeof SettingsMcpServersRoute
  SettingsOllamaRoute: typeof SettingsOllamaRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
}

const SettingsRouteChildren: SettingsRouteChildren = {
  SettingsMcpClientsRoute: SettingsMcpClientsRoute,
  SettingsMcpServersRoute: SettingsMcpServersRoute,
  SettingsOllamaRoute: SettingsOllamaRoute,
  SettingsIndexRoute: SettingsIndexRoute,
}

const SettingsRouteWithChildren = SettingsRoute._addFileChildren(
  SettingsRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ChatRoute: ChatRoute,
  ConnectorsRoute: ConnectorsRoute,
  LlmProvidersRoute: LlmProvidersRouteWithChildren,
  SettingsRoute: SettingsRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
