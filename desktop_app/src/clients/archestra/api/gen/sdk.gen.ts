// This file is auto-generated by @hey-api/openapi-ts
import type { Client, Options as ClientOptions, TDataShape } from './client';
import { client as _heyApiClient } from './client.gen';
import type {
  DeleteChatApiChatByIdData,
  DeleteChatApiChatByIdResponses,
  DeleteExternalMcpClientApiExternalMcpClientByClientNameDisconnectData,
  DeleteExternalMcpClientApiExternalMcpClientByClientNameDisconnectResponses,
  DeleteMcpServerApiMcpServerByMcpServerNameData,
  DeleteMcpServerApiMcpServerByMcpServerNameErrors,
  DeleteMcpServerApiMcpServerByMcpServerNameResponses,
  GetChatApiChatByIdData,
  GetChatApiChatByIdResponses,
  GetChatApiChatData,
  GetChatApiChatResponses,
  GetExternalMcpClientApiExternalMcpClientData,
  GetExternalMcpClientApiExternalMcpClientResponses,
  GetExternalMcpClientApiExternalMcpClientSupportedData,
  GetExternalMcpClientApiExternalMcpClientSupportedResponses,
  GetMcpServerApiMcpServerData,
  GetMcpServerApiMcpServerErrors,
  GetMcpServerApiMcpServerResponses,
  PatchChatApiChatByIdData,
  PatchChatApiChatByIdResponses,
  PostChatApiChatData,
  PostChatApiChatResponses,
  PostExternalMcpClientApiExternalMcpClientConnectData,
  PostExternalMcpClientApiExternalMcpClientConnectResponses,
  PostLlmApiLlmStreamData,
  PostLlmApiLlmStreamResponses,
  PostMcpServerApiMcpServerInstallData,
  PostMcpServerApiMcpServerInstallErrors,
  PostMcpServerApiMcpServerInstallResponses,
  PostMcpServerApiMcpServerStartOauthData,
  PostMcpServerApiMcpServerStartOauthErrors,
  PostMcpServerApiMcpServerStartOauthResponses,
} from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<
  TData,
  ThrowOnError
> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export const getChatApiChat = <ThrowOnError extends boolean = false>(
  options?: Options<GetChatApiChatData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetChatApiChatResponses, unknown, ThrowOnError>({
    url: '/chat/api/chat',
    ...options,
  });
};

export const postChatApiChat = <ThrowOnError extends boolean = false>(
  options?: Options<PostChatApiChatData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<PostChatApiChatResponses, unknown, ThrowOnError>({
    url: '/chat/api/chat',
    ...options,
  });
};

export const deleteChatApiChatById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteChatApiChatByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<DeleteChatApiChatByIdResponses, unknown, ThrowOnError>({
    url: '/chat/api/chat/{id}',
    ...options,
  });
};

export const getChatApiChatById = <ThrowOnError extends boolean = false>(
  options: Options<GetChatApiChatByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<GetChatApiChatByIdResponses, unknown, ThrowOnError>({
    url: '/chat/api/chat/{id}',
    ...options,
  });
};

export const patchChatApiChatById = <ThrowOnError extends boolean = false>(
  options: Options<PatchChatApiChatByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<PatchChatApiChatByIdResponses, unknown, ThrowOnError>({
    url: '/chat/api/chat/{id}',
    ...options,
  });
};

export const getExternalMcpClientApiExternalMcpClient = <ThrowOnError extends boolean = false>(
  options?: Options<GetExternalMcpClientApiExternalMcpClientData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetExternalMcpClientApiExternalMcpClientResponses,
    unknown,
    ThrowOnError
  >({
    url: '/externalMcpClient/api/external_mcp_client',
    ...options,
  });
};

export const getExternalMcpClientApiExternalMcpClientSupported = <ThrowOnError extends boolean = false>(
  options?: Options<GetExternalMcpClientApiExternalMcpClientSupportedData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetExternalMcpClientApiExternalMcpClientSupportedResponses,
    unknown,
    ThrowOnError
  >({
    url: '/externalMcpClient/api/external_mcp_client/supported',
    ...options,
  });
};

export const postExternalMcpClientApiExternalMcpClientConnect = <ThrowOnError extends boolean = false>(
  options?: Options<PostExternalMcpClientApiExternalMcpClientConnectData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    PostExternalMcpClientApiExternalMcpClientConnectResponses,
    unknown,
    ThrowOnError
  >({
    url: '/externalMcpClient/api/external_mcp_client/connect',
    ...options,
  });
};

export const deleteExternalMcpClientApiExternalMcpClientByClientNameDisconnect = <ThrowOnError extends boolean = false>(
  options: Options<DeleteExternalMcpClientApiExternalMcpClientByClientNameDisconnectData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteExternalMcpClientApiExternalMcpClientByClientNameDisconnectResponses,
    unknown,
    ThrowOnError
  >({
    url: '/externalMcpClient/api/external_mcp_client/{client_name}/disconnect',
    ...options,
  });
};

export const postLlmApiLlmStream = <ThrowOnError extends boolean = false>(
  options?: Options<PostLlmApiLlmStreamData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<PostLlmApiLlmStreamResponses, unknown, ThrowOnError>({
    url: '/llm/api/llm/stream',
    ...options,
  });
};

/**
 * Get all installed MCP servers
 */
export const getMcpServerApiMcpServer = <ThrowOnError extends boolean = false>(
  options?: Options<GetMcpServerApiMcpServerData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetMcpServerApiMcpServerResponses,
    GetMcpServerApiMcpServerErrors,
    ThrowOnError
  >({
    url: '/mcpServer/api/mcp_server',
    ...options,
  });
};

/**
 * Install MCP server from catalog
 */
export const postMcpServerApiMcpServerInstall = <ThrowOnError extends boolean = false>(
  options: Options<PostMcpServerApiMcpServerInstallData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostMcpServerApiMcpServerInstallResponses,
    PostMcpServerApiMcpServerInstallErrors,
    ThrowOnError
  >({
    url: '/mcpServer/api/mcp_server/install',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Uninstall MCP server
 */
export const deleteMcpServerApiMcpServerByMcpServerName = <ThrowOnError extends boolean = false>(
  options: Options<DeleteMcpServerApiMcpServerByMcpServerNameData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteMcpServerApiMcpServerByMcpServerNameResponses,
    DeleteMcpServerApiMcpServerByMcpServerNameErrors,
    ThrowOnError
  >({
    url: '/mcpServer/api/mcp_server/{mcp_server_name}',
    ...options,
  });
};

/**
 * Start MCP server OAuth flow
 */
export const postMcpServerApiMcpServerStartOauth = <ThrowOnError extends boolean = false>(
  options: Options<PostMcpServerApiMcpServerStartOauthData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostMcpServerApiMcpServerStartOauthResponses,
    PostMcpServerApiMcpServerStartOauthErrors,
    ThrowOnError
  >({
    url: '/mcpServer/api/mcp_server/start_oauth',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};
