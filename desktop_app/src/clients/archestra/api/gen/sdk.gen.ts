// This file is auto-generated by @hey-api/openapi-ts
import type { Client, Options as ClientOptions, TDataShape } from './client';
import { client as _heyApiClient } from './client.gen';
import type {
  ClearMcpRequestLogsData,
  ClearMcpRequestLogsResponses,
  ConnectExternalMcpClientData,
  ConnectExternalMcpClientResponses,
  CreateChatData,
  CreateChatResponses,
  DeleteChatData,
  DeleteChatResponses,
  DisconnectExternalMcpClientData,
  DisconnectExternalMcpClientResponses,
  GetApiMcpTestData,
  GetApiMcpTestResponses,
  GetChatByIdData,
  GetChatByIdResponses,
  GetChatsData,
  GetChatsResponses,
  GetConnectedExternalMcpClientsData,
  GetConnectedExternalMcpClientsResponses,
  GetMcpRequestLogByIdData,
  GetMcpRequestLogByIdResponses,
  GetMcpRequestLogStatsData,
  GetMcpRequestLogStatsResponses,
  GetMcpRequestLogsData,
  GetMcpRequestLogsResponses,
  GetMcpServersData,
  GetMcpServersResponses,
  GetSandboxStatusData,
  GetSandboxStatusResponses,
  GetSupportedExternalMcpClientsData,
  GetSupportedExternalMcpClientsResponses,
  InstallCustomMcpServerData,
  InstallCustomMcpServerErrors,
  InstallCustomMcpServerResponses,
  InstallMcpServerData,
  InstallMcpServerErrors,
  InstallMcpServerResponses,
  StartMcpServerOauthData,
  StartMcpServerOauthErrors,
  StartMcpServerOauthResponses,
  StreamLlmResponseData,
  StreamLlmResponseResponses,
  UninstallMcpServerData,
  UninstallMcpServerErrors,
  UninstallMcpServerResponses,
  UpdateChatData,
  UpdateChatResponses,
} from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<
  TData,
  ThrowOnError
> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Get all chats
 */
export const getChats = <ThrowOnError extends boolean = false>(options?: Options<GetChatsData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetChatsResponses, unknown, ThrowOnError>({
    url: '/api/chat',
    ...options,
  });
};

/**
 * Create new chat
 */
export const createChat = <ThrowOnError extends boolean = false>(options?: Options<CreateChatData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<CreateChatResponses, unknown, ThrowOnError>({
    url: '/api/chat',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Delete chat
 */
export const deleteChat = <ThrowOnError extends boolean = false>(options: Options<DeleteChatData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).delete<DeleteChatResponses, unknown, ThrowOnError>({
    url: '/api/chat/{id}',
    ...options,
  });
};

/**
 * Get single chat with messages
 */
export const getChatById = <ThrowOnError extends boolean = false>(options: Options<GetChatByIdData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetChatByIdResponses, unknown, ThrowOnError>({
    url: '/api/chat/{id}',
    ...options,
  });
};

/**
 * Update chat
 */
export const updateChat = <ThrowOnError extends boolean = false>(options: Options<UpdateChatData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).patch<UpdateChatResponses, unknown, ThrowOnError>({
    url: '/api/chat/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get all connected external MCP clients
 */
export const getConnectedExternalMcpClients = <ThrowOnError extends boolean = false>(
  options?: Options<GetConnectedExternalMcpClientsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetConnectedExternalMcpClientsResponses, unknown, ThrowOnError>({
    url: '/api/external_mcp_client',
    ...options,
  });
};

/**
 * Get supported external MCP client names
 */
export const getSupportedExternalMcpClients = <ThrowOnError extends boolean = false>(
  options?: Options<GetSupportedExternalMcpClientsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetSupportedExternalMcpClientsResponses, unknown, ThrowOnError>({
    url: '/api/external_mcp_client/supported',
    ...options,
  });
};

/**
 * Connect an external MCP client
 */
export const connectExternalMcpClient = <ThrowOnError extends boolean = false>(
  options?: Options<ConnectExternalMcpClientData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<ConnectExternalMcpClientResponses, unknown, ThrowOnError>({
    url: '/api/external_mcp_client/connect',
    ...options,
  });
};

/**
 * Disconnect an external MCP client
 */
export const disconnectExternalMcpClient = <ThrowOnError extends boolean = false>(
  options: Options<DisconnectExternalMcpClientData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<DisconnectExternalMcpClientResponses, unknown, ThrowOnError>({
    url: '/api/external_mcp_client/{client_name}/disconnect',
    ...options,
  });
};

export const getApiMcpTest = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiMcpTestData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetApiMcpTestResponses, unknown, ThrowOnError>({
    url: '/api/mcp/test',
    ...options,
  });
};

/**
 * Stream LLM response
 */
export const streamLlmResponse = <ThrowOnError extends boolean = false>(
  options?: Options<StreamLlmResponseData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<StreamLlmResponseResponses, unknown, ThrowOnError>({
    url: '/api/llm/openai/stream',
    ...options,
  });
};

/**
 * Clear MCP request logs
 */
export const clearMcpRequestLogs = <ThrowOnError extends boolean = false>(
  options?: Options<ClearMcpRequestLogsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).delete<ClearMcpRequestLogsResponses, unknown, ThrowOnError>({
    url: '/api/mcp_request_log',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get MCP request logs with filtering and pagination
 */
export const getMcpRequestLogs = <ThrowOnError extends boolean = false>(
  options?: Options<GetMcpRequestLogsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetMcpRequestLogsResponses, unknown, ThrowOnError>({
    url: '/api/mcp_request_log',
    ...options,
  });
};

/**
 * Get a single MCP request log by ID
 */
export const getMcpRequestLogById = <ThrowOnError extends boolean = false>(
  options: Options<GetMcpRequestLogByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<GetMcpRequestLogByIdResponses, unknown, ThrowOnError>({
    url: '/api/mcp_request_log/{id}',
    ...options,
  });
};

/**
 * Get MCP request log statistics
 */
export const getMcpRequestLogStats = <ThrowOnError extends boolean = false>(
  options?: Options<GetMcpRequestLogStatsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetMcpRequestLogStatsResponses, unknown, ThrowOnError>({
    url: '/api/mcp_request_log/stats',
    ...options,
  });
};

/**
 * Get all installed MCP servers
 */
export const getMcpServers = <ThrowOnError extends boolean = false>(
  options?: Options<GetMcpServersData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetMcpServersResponses, unknown, ThrowOnError>({
    url: '/api/mcp_server',
    ...options,
  });
};

/**
 * Install MCP server from catalog
 */
export const installMcpServer = <ThrowOnError extends boolean = false>(
  options?: Options<InstallMcpServerData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<InstallMcpServerResponses, InstallMcpServerErrors, ThrowOnError>({
    url: '/api/mcp_server/install',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Install custom MCP server
 */
export const installCustomMcpServer = <ThrowOnError extends boolean = false>(
  options?: Options<InstallCustomMcpServerData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    InstallCustomMcpServerResponses,
    InstallCustomMcpServerErrors,
    ThrowOnError
  >({
    url: '/api/mcp_server/install_custom',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Uninstall MCP server
 */
export const uninstallMcpServer = <ThrowOnError extends boolean = false>(
  options?: Options<UninstallMcpServerData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).delete<UninstallMcpServerResponses, UninstallMcpServerErrors, ThrowOnError>(
    {
      url: '/api/mcp_server/{slug}',
      ...options,
    }
  );
};

/**
 * Start MCP server OAuth flow
 */
export const startMcpServerOauth = <ThrowOnError extends boolean = false>(
  options?: Options<StartMcpServerOauthData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<StartMcpServerOauthResponses, StartMcpServerOauthErrors, ThrowOnError>(
    {
      url: '/api/mcp_server/start_oauth',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers,
      },
    }
  );
};

/**
 * Get the current status of the sandbox environment
 */
export const getSandboxStatus = <ThrowOnError extends boolean = false>(
  options?: Options<GetSandboxStatusData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetSandboxStatusResponses, unknown, ThrowOnError>({
    url: '/api/sandbox/status',
    ...options,
  });
};
