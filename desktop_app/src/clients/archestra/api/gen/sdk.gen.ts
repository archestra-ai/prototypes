// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetChatApiChatData, GetChatApiChatResponses, PostChatApiChatData, PostChatApiChatResponses, DeleteChatApiChatByIdData, DeleteChatApiChatByIdResponses, PatchChatApiChatByIdData, PatchChatApiChatByIdResponses, GetExternalMcpClientApiExternalMcpClientData, GetExternalMcpClientApiExternalMcpClientResponses, GetExternalMcpClientApiExternalMcpClientSupportedData, GetExternalMcpClientApiExternalMcpClientSupportedResponses, PostExternalMcpClientApiExternalMcpClientConnectData, PostExternalMcpClientApiExternalMcpClientConnectResponses, DeleteExternalMcpClientApiExternalMcpClientByClientNameDisconnectData, DeleteExternalMcpClientApiExternalMcpClientByClientNameDisconnectResponses, PostLlmApiLlmStreamData, PostLlmApiLlmStreamResponses, GetMcpServerApiMcpServerData, GetMcpServerApiMcpServerResponses, GetMcpServerApiMcpServerCatalogData, GetMcpServerApiMcpServerCatalogResponses, PostMcpServerApiMcpServerCatalogInstallData, PostMcpServerApiMcpServerCatalogInstallResponses, PostMcpServerApiMcpServerStartOauthData, PostMcpServerApiMcpServerStartOauthResponses, DeleteMcpServerApiMcpServerByMcpServerNameData, DeleteMcpServerApiMcpServerByMcpServerNameResponses, DeleteOllamaLlmOllamaData, DeleteOllamaLlmOllamaResponses, GetOllamaLlmOllamaData, GetOllamaLlmOllamaResponses, HeadOllamaLlmOllamaData, HeadOllamaLlmOllamaResponses, OptionsOllamaLlmOllamaData, OptionsOllamaLlmOllamaResponses, PatchOllamaLlmOllamaData, PatchOllamaLlmOllamaResponses, PostOllamaLlmOllamaData, PostOllamaLlmOllamaResponses, PutOllamaLlmOllamaData, PutOllamaLlmOllamaResponses, DeleteOllamaLlmOllamaBy__Data, DeleteOllamaLlmOllamaBy__Responses, GetOllamaLlmOllamaBy__Data, GetOllamaLlmOllamaBy__Responses, HeadOllamaLlmOllamaBy__Data, HeadOllamaLlmOllamaBy__Responses, OptionsOllamaLlmOllamaBy__Data, OptionsOllamaLlmOllamaBy__Responses, PatchOllamaLlmOllamaBy__Data, PatchOllamaLlmOllamaBy__Responses, PostOllamaLlmOllamaBy__Data, PostOllamaLlmOllamaBy__Responses, PutOllamaLlmOllamaBy__Data, PutOllamaLlmOllamaBy__Responses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getChatApiChat = <ThrowOnError extends boolean = false>(options?: Options<GetChatApiChatData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetChatApiChatResponses, unknown, ThrowOnError>({
        url: '/chat/api/chat',
        ...options
    });
};

export const postChatApiChat = <ThrowOnError extends boolean = false>(options?: Options<PostChatApiChatData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostChatApiChatResponses, unknown, ThrowOnError>({
        url: '/chat/api/chat',
        ...options
    });
};

export const deleteChatApiChatById = <ThrowOnError extends boolean = false>(options: Options<DeleteChatApiChatByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteChatApiChatByIdResponses, unknown, ThrowOnError>({
        url: '/chat/api/chat/{id}',
        ...options
    });
};

export const patchChatApiChatById = <ThrowOnError extends boolean = false>(options: Options<PatchChatApiChatByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchChatApiChatByIdResponses, unknown, ThrowOnError>({
        url: '/chat/api/chat/{id}',
        ...options
    });
};

export const getExternalMcpClientApiExternalMcpClient = <ThrowOnError extends boolean = false>(options?: Options<GetExternalMcpClientApiExternalMcpClientData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetExternalMcpClientApiExternalMcpClientResponses, unknown, ThrowOnError>({
        url: '/externalMcpClient/api/external_mcp_client',
        ...options
    });
};

export const getExternalMcpClientApiExternalMcpClientSupported = <ThrowOnError extends boolean = false>(options?: Options<GetExternalMcpClientApiExternalMcpClientSupportedData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetExternalMcpClientApiExternalMcpClientSupportedResponses, unknown, ThrowOnError>({
        url: '/externalMcpClient/api/external_mcp_client/supported',
        ...options
    });
};

export const postExternalMcpClientApiExternalMcpClientConnect = <ThrowOnError extends boolean = false>(options?: Options<PostExternalMcpClientApiExternalMcpClientConnectData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostExternalMcpClientApiExternalMcpClientConnectResponses, unknown, ThrowOnError>({
        url: '/externalMcpClient/api/external_mcp_client/connect',
        ...options
    });
};

export const deleteExternalMcpClientApiExternalMcpClientByClientNameDisconnect = <ThrowOnError extends boolean = false>(options: Options<DeleteExternalMcpClientApiExternalMcpClientByClientNameDisconnectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteExternalMcpClientApiExternalMcpClientByClientNameDisconnectResponses, unknown, ThrowOnError>({
        url: '/externalMcpClient/api/external_mcp_client/{client_name}/disconnect',
        ...options
    });
};

export const postLlmApiLlmStream = <ThrowOnError extends boolean = false>(options?: Options<PostLlmApiLlmStreamData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostLlmApiLlmStreamResponses, unknown, ThrowOnError>({
        url: '/llm/api/llm/stream',
        ...options
    });
};

export const getMcpServerApiMcpServer = <ThrowOnError extends boolean = false>(options?: Options<GetMcpServerApiMcpServerData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMcpServerApiMcpServerResponses, unknown, ThrowOnError>({
        url: '/mcpServer/api/mcp_server',
        ...options
    });
};

export const getMcpServerApiMcpServerCatalog = <ThrowOnError extends boolean = false>(options?: Options<GetMcpServerApiMcpServerCatalogData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMcpServerApiMcpServerCatalogResponses, unknown, ThrowOnError>({
        url: '/mcpServer/api/mcp_server/catalog',
        ...options
    });
};

export const postMcpServerApiMcpServerCatalogInstall = <ThrowOnError extends boolean = false>(options?: Options<PostMcpServerApiMcpServerCatalogInstallData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostMcpServerApiMcpServerCatalogInstallResponses, unknown, ThrowOnError>({
        url: '/mcpServer/api/mcp_server/catalog/install',
        ...options
    });
};

export const postMcpServerApiMcpServerStartOauth = <ThrowOnError extends boolean = false>(options?: Options<PostMcpServerApiMcpServerStartOauthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostMcpServerApiMcpServerStartOauthResponses, unknown, ThrowOnError>({
        url: '/mcpServer/api/mcp_server/start_oauth',
        ...options
    });
};

export const deleteMcpServerApiMcpServerByMcpServerName = <ThrowOnError extends boolean = false>(options: Options<DeleteMcpServerApiMcpServerByMcpServerNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteMcpServerApiMcpServerByMcpServerNameResponses, unknown, ThrowOnError>({
        url: '/mcpServer/api/mcp_server/{mcp_server_name}',
        ...options
    });
};

export const deleteOllamaLlmOllama = <ThrowOnError extends boolean = false>(options?: Options<DeleteOllamaLlmOllamaData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteOllamaLlmOllamaResponses, unknown, ThrowOnError>({
        url: '/ollama/llm/ollama/',
        ...options
    });
};

export const getOllamaLlmOllama = <ThrowOnError extends boolean = false>(options?: Options<GetOllamaLlmOllamaData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOllamaLlmOllamaResponses, unknown, ThrowOnError>({
        url: '/ollama/llm/ollama/',
        ...options
    });
};

export const headOllamaLlmOllama = <ThrowOnError extends boolean = false>(options?: Options<HeadOllamaLlmOllamaData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<HeadOllamaLlmOllamaResponses, unknown, ThrowOnError>({
        url: '/ollama/llm/ollama/',
        ...options
    });
};

export const optionsOllamaLlmOllama = <ThrowOnError extends boolean = false>(options?: Options<OptionsOllamaLlmOllamaData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).options<OptionsOllamaLlmOllamaResponses, unknown, ThrowOnError>({
        url: '/ollama/llm/ollama/',
        ...options
    });
};

export const patchOllamaLlmOllama = <ThrowOnError extends boolean = false>(options?: Options<PatchOllamaLlmOllamaData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<PatchOllamaLlmOllamaResponses, unknown, ThrowOnError>({
        url: '/ollama/llm/ollama/',
        ...options
    });
};

export const postOllamaLlmOllama = <ThrowOnError extends boolean = false>(options?: Options<PostOllamaLlmOllamaData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostOllamaLlmOllamaResponses, unknown, ThrowOnError>({
        url: '/ollama/llm/ollama/',
        ...options
    });
};

export const putOllamaLlmOllama = <ThrowOnError extends boolean = false>(options?: Options<PutOllamaLlmOllamaData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutOllamaLlmOllamaResponses, unknown, ThrowOnError>({
        url: '/ollama/llm/ollama/',
        ...options
    });
};

export const deleteOllamaLlmOllamaBy-* = <ThrowOnError extends boolean = false>(options: Options<DeleteOllamaLlmOllamaBy__Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOllamaLlmOllamaBy__Responses, unknown, ThrowOnError>({
        url: '/ollama/llm/ollama/{*}',
        ...options
    });
};

export const getOllamaLlmOllamaBy-* = <ThrowOnError extends boolean = false>(options: Options<GetOllamaLlmOllamaBy__Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOllamaLlmOllamaBy__Responses, unknown, ThrowOnError>({
        url: '/ollama/llm/ollama/{*}',
        ...options
    });
};

export const headOllamaLlmOllamaBy-* = <ThrowOnError extends boolean = false>(options: Options<HeadOllamaLlmOllamaBy__Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).head<HeadOllamaLlmOllamaBy__Responses, unknown, ThrowOnError>({
        url: '/ollama/llm/ollama/{*}',
        ...options
    });
};

export const optionsOllamaLlmOllamaBy-* = <ThrowOnError extends boolean = false>(options: Options<OptionsOllamaLlmOllamaBy__Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).options<OptionsOllamaLlmOllamaBy__Responses, unknown, ThrowOnError>({
        url: '/ollama/llm/ollama/{*}',
        ...options
    });
};

export const patchOllamaLlmOllamaBy-* = <ThrowOnError extends boolean = false>(options: Options<PatchOllamaLlmOllamaBy__Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchOllamaLlmOllamaBy__Responses, unknown, ThrowOnError>({
        url: '/ollama/llm/ollama/{*}',
        ...options
    });
};

export const postOllamaLlmOllamaBy-* = <ThrowOnError extends boolean = false>(options: Options<PostOllamaLlmOllamaBy__Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostOllamaLlmOllamaBy__Responses, unknown, ThrowOnError>({
        url: '/ollama/llm/ollama/{*}',
        ...options
    });
};

export const putOllamaLlmOllamaBy-* = <ThrowOnError extends boolean = false>(options: Options<PutOllamaLlmOllamaBy__Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutOllamaLlmOllamaBy__Responses, unknown, ThrowOnError>({
        url: '/ollama/llm/ollama/{*}',
        ...options
    });
};