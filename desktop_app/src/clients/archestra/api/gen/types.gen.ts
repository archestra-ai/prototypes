// This file is auto-generated by @hey-api/openapi-ts

export type GetChatsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/chat';
};

export type GetChatsResponses = {
  /**
   * Default Response
   */
  200: unknown;
};

export type CreateChatData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/chat';
};

export type CreateChatResponses = {
  /**
   * Default Response
   */
  200: unknown;
};

export type DeleteChatData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/chat/{id}';
};

export type DeleteChatResponses = {
  /**
   * Default Response
   */
  200: unknown;
};

export type GetChatByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/chat/{id}';
};

export type GetChatByIdResponses = {
  /**
   * Default Response
   */
  200: unknown;
};

export type UpdateChatData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/chat/{id}';
};

export type UpdateChatResponses = {
  /**
   * Default Response
   */
  200: unknown;
};

export type GetConnectedExternalMcpClientsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/external_mcp_client';
};

export type GetConnectedExternalMcpClientsResponses = {
  /**
   * Default Response
   */
  200: unknown;
};

export type GetSupportedExternalMcpClientsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/external_mcp_client/supported';
};

export type GetSupportedExternalMcpClientsResponses = {
  /**
   * Default Response
   */
  200: unknown;
};

export type ConnectExternalMcpClientData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/external_mcp_client/connect';
};

export type ConnectExternalMcpClientResponses = {
  /**
   * Default Response
   */
  200: unknown;
};

export type DisconnectExternalMcpClientData = {
  body?: never;
  path: {
    client_name: string;
  };
  query?: never;
  url: '/api/external_mcp_client/{client_name}/disconnect';
};

export type DisconnectExternalMcpClientResponses = {
  /**
   * Default Response
   */
  200: unknown;
};

export type StreamLlmResponseData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/llm/stream';
};

export type StreamLlmResponseResponses = {
  /**
   * Default Response
   */
  200: unknown;
};

export type ClearMcpRequestLogsData = {
  body?: {
    clear_all?: boolean;
  };
  path?: never;
  query?: never;
  url: '/api/mcp_request_log';
};

export type ClearMcpRequestLogsErrors = {
  /**
   * Default Response
   */
  500: {
    error?: string;
  };
};

export type ClearMcpRequestLogsError = ClearMcpRequestLogsErrors[keyof ClearMcpRequestLogsErrors];

export type ClearMcpRequestLogsResponses = {
  /**
   * Number of logs cleared
   */
  200: {
    cleared: number;
  };
};

export type ClearMcpRequestLogsResponse = ClearMcpRequestLogsResponses[keyof ClearMcpRequestLogsResponses];

export type GetMcpRequestLogsData = {
  body?: never;
  path?: never;
  query?: {
    server_name?: string;
    method?: string;
    status?: 'success' | 'error';
    search?: string;
    date_from?: string;
    date_to?: string;
    page?: number;
    page_size?: number;
  };
  url: '/api/mcp_request_log';
};

export type GetMcpRequestLogsErrors = {
  /**
   * Default Response
   */
  500: {
    error?: string;
  };
};

export type GetMcpRequestLogsError = GetMcpRequestLogsErrors[keyof GetMcpRequestLogsErrors];

export type GetMcpRequestLogsResponses = {
  /**
   * Paginated list of MCP request logs
   */
  200: {
    data: Array<{
      id: string;
      request_id?: string;
      session_id?: string;
      mcp_session_id?: string;
      server_name: string;
      client_info?: string;
      method: string;
      status: 'pending' | 'success' | 'error';
      duration_ms?: number;
      timestamp: string;
      request?: string;
      response?: string;
      error?: string;
      headers?: {
        [key: string]: unknown;
      };
    }>;
    total: number;
    page: number;
    page_size: number;
  };
};

export type GetMcpRequestLogsResponse = GetMcpRequestLogsResponses[keyof GetMcpRequestLogsResponses];

export type GetMcpRequestLogByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/mcp_request_log/{id}';
};

export type GetMcpRequestLogByIdErrors = {
  /**
   * Default Response
   */
  404: {
    error?: string;
  };
  /**
   * Default Response
   */
  500: {
    error?: string;
  };
};

export type GetMcpRequestLogByIdError = GetMcpRequestLogByIdErrors[keyof GetMcpRequestLogByIdErrors];

export type GetMcpRequestLogByIdResponses = {
  /**
   * MCP request log
   */
  200: {
    id: string;
    request_id?: string;
    session_id?: string;
    mcp_session_id?: string;
    server_name: string;
    client_info?: string;
    method: string;
    status: 'pending' | 'success' | 'error';
    duration_ms?: number;
    timestamp: string;
    request?: string;
    response?: string;
    error?: string;
    headers?: {
      [key: string]: unknown;
    };
  };
};

export type GetMcpRequestLogByIdResponse = GetMcpRequestLogByIdResponses[keyof GetMcpRequestLogByIdResponses];

export type GetMcpRequestLogStatsData = {
  body?: never;
  path?: never;
  query?: {
    server_name?: string;
    method?: string;
    status?: 'success' | 'error';
    date_from?: string;
    date_to?: string;
  };
  url: '/api/mcp_request_log/stats';
};

export type GetMcpRequestLogStatsErrors = {
  /**
   * Default Response
   */
  500: {
    error?: string;
  };
};

export type GetMcpRequestLogStatsError = GetMcpRequestLogStatsErrors[keyof GetMcpRequestLogStatsErrors];

export type GetMcpRequestLogStatsResponses = {
  /**
   * MCP request log statistics
   */
  200: {
    totalRequests: number;
    successCount: number;
    errorCount: number;
    avgDurationMs: number;
    requestsPerServer: {
      [key: string]: number;
    };
  };
};

export type GetMcpRequestLogStatsResponse = GetMcpRequestLogStatsResponses[keyof GetMcpRequestLogStatsResponses];

export type GetMcpServersData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/mcp_server';
};

export type GetMcpServersErrors = {
  /**
   * Default Response
   */
  500: {
    error?: string;
  };
};

export type GetMcpServersError = GetMcpServersErrors[keyof GetMcpServersErrors];

export type GetMcpServersResponses = {
  /**
   * List of installed MCP servers
   */
  200: Array<{
    name: string;
    config: {
      command: string;
      args?: Array<string>;
      env?: {
        [key: string]: unknown;
      };
      transport?: string;
    };
    tools?: Array<{
      name: string;
      description?: string;
      inputSchema?: {
        [key: string]: unknown;
      };
    }>;
  }>;
};

export type GetMcpServersResponse = GetMcpServersResponses[keyof GetMcpServersResponses];

export type InstallMcpServerData = {
  body: {
    mcp_connector_id: string;
  };
  path?: never;
  query?: never;
  url: '/api/mcp_server/install';
};

export type InstallMcpServerErrors = {
  /**
   * Default Response
   */
  400: {
    error?: string;
  };
  /**
   * Default Response
   */
  404: {
    error?: string;
  };
  /**
   * Default Response
   */
  500: {
    error?: string;
  };
};

export type InstallMcpServerError = InstallMcpServerErrors[keyof InstallMcpServerErrors];

export type InstallMcpServerResponses = {
  /**
   * Default Response
   */
  200: {
    success?: boolean;
  };
};

export type InstallMcpServerResponse = InstallMcpServerResponses[keyof InstallMcpServerResponses];

export type UninstallMcpServerData = {
  body?: never;
  path: {
    mcp_server_name: string;
  };
  query?: never;
  url: '/api/mcp_server/{mcp_server_name}';
};

export type UninstallMcpServerErrors = {
  /**
   * Default Response
   */
  400: {
    error?: string;
  };
  /**
   * Default Response
   */
  500: {
    error?: string;
  };
};

export type UninstallMcpServerError = UninstallMcpServerErrors[keyof UninstallMcpServerErrors];

export type UninstallMcpServerResponses = {
  /**
   * Default Response
   */
  200: {
    success?: boolean;
  };
};

export type UninstallMcpServerResponse = UninstallMcpServerResponses[keyof UninstallMcpServerResponses];

export type StartMcpServerOauthData = {
  body: {
    mcp_connector_id: string;
  };
  path?: never;
  query?: never;
  url: '/api/mcp_server/start_oauth';
};

export type StartMcpServerOauthErrors = {
  /**
   * Default Response
   */
  400: {
    error?: string;
  };
  /**
   * Default Response
   */
  500: {
    error?: string;
  };
};

export type StartMcpServerOauthError = StartMcpServerOauthErrors[keyof StartMcpServerOauthErrors];

export type StartMcpServerOauthResponses = {
  /**
   * Default Response
   */
  200: {
    auth_url?: string;
  };
};

export type StartMcpServerOauthResponse = StartMcpServerOauthResponses[keyof StartMcpServerOauthResponses];

export type ClientOptions = {
  baseUrl: `${string}://${string}` | (string & {});
};
