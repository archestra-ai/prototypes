// This file is auto-generated by @hey-api/openapi-ts

export type GetChatApiChatData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/chat/api/chat';
};

export type GetChatApiChatResponses = {
  /**
   * Default Response
   */
  200: unknown;
};

export type PostChatApiChatData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/chat/api/chat';
};

export type PostChatApiChatResponses = {
  /**
   * Default Response
   */
  200: unknown;
};

export type DeleteChatApiChatByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/chat/api/chat/{id}';
};

export type DeleteChatApiChatByIdResponses = {
  /**
   * Default Response
   */
  200: unknown;
};

export type PatchChatApiChatByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/chat/api/chat/{id}';
};

export type PatchChatApiChatByIdResponses = {
  /**
   * Default Response
   */
  200: unknown;
};

export type GetExternalMcpClientApiExternalMcpClientData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/externalMcpClient/api/external_mcp_client';
};

export type GetExternalMcpClientApiExternalMcpClientResponses = {
  /**
   * Default Response
   */
  200: unknown;
};

export type GetExternalMcpClientApiExternalMcpClientSupportedData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/externalMcpClient/api/external_mcp_client/supported';
};

export type GetExternalMcpClientApiExternalMcpClientSupportedResponses = {
  /**
   * Default Response
   */
  200: unknown;
};

export type PostExternalMcpClientApiExternalMcpClientConnectData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/externalMcpClient/api/external_mcp_client/connect';
};

export type PostExternalMcpClientApiExternalMcpClientConnectResponses = {
  /**
   * Default Response
   */
  200: unknown;
};

export type DeleteExternalMcpClientApiExternalMcpClientByClientNameDisconnectData = {
  body?: never;
  path: {
    client_name: string;
  };
  query?: never;
  url: '/externalMcpClient/api/external_mcp_client/{client_name}/disconnect';
};

export type DeleteExternalMcpClientApiExternalMcpClientByClientNameDisconnectResponses = {
  /**
   * Default Response
   */
  200: unknown;
};

export type PostLlmApiLlmStreamData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/llm/api/llm/stream';
};

export type PostLlmApiLlmStreamResponses = {
  /**
   * Default Response
   */
  200: unknown;
};

export type GetMcpServerApiMcpServerData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/mcpServer/api/mcp_server';
};

export type GetMcpServerApiMcpServerErrors = {
  /**
   * Default Response
   */
  500: {
    error?: string;
  };
};

export type GetMcpServerApiMcpServerError = GetMcpServerApiMcpServerErrors[keyof GetMcpServerApiMcpServerErrors];

export type GetMcpServerApiMcpServerResponses = {
  /**
   * List of installed MCP servers
   */
  200: Array<{
    name: string;
    config: {
      command: string;
      args?: Array<string>;
      env?: {
        [key: string]: unknown;
      };
      transport?: string;
    };
    tools?: Array<{
      name: string;
      description?: string;
      inputSchema?: {
        [key: string]: unknown;
      };
    }>;
  }>;
};

export type GetMcpServerApiMcpServerResponse =
  GetMcpServerApiMcpServerResponses[keyof GetMcpServerApiMcpServerResponses];

export type GetMcpServerApiMcpServerCatalogData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/mcpServer/api/mcp_server/catalog';
};

export type GetMcpServerApiMcpServerCatalogErrors = {
  /**
   * Default Response
   */
  500: {
    error?: string;
  };
};

export type GetMcpServerApiMcpServerCatalogError =
  GetMcpServerApiMcpServerCatalogErrors[keyof GetMcpServerApiMcpServerCatalogErrors];

export type GetMcpServerApiMcpServerCatalogResponses = {
  /**
   * List of available MCP connectors
   */
  200: Array<{
    id: string;
    title: string;
    description: string;
    provider?: string;
    slug?: string;
    githubRepo?: string;
    serverPath?: string;
    installInstructions?: Array<string>;
    configurationInstructions?: Array<string>;
    oauth?: {
      required?: boolean;
      provider?: string;
    };
    featured?: boolean;
    core?: boolean;
    tools?: Array<{
      name?: string;
      description?: string;
    }>;
  }>;
};

export type GetMcpServerApiMcpServerCatalogResponse =
  GetMcpServerApiMcpServerCatalogResponses[keyof GetMcpServerApiMcpServerCatalogResponses];

export type PostMcpServerApiMcpServerCatalogInstallData = {
  body: {
    mcp_connector_id: string;
  };
  path?: never;
  query?: never;
  url: '/mcpServer/api/mcp_server/catalog/install';
};

export type PostMcpServerApiMcpServerCatalogInstallErrors = {
  /**
   * Default Response
   */
  400: {
    error?: string;
  };
  /**
   * Default Response
   */
  404: {
    error?: string;
  };
  /**
   * Default Response
   */
  500: {
    error?: string;
  };
};

export type PostMcpServerApiMcpServerCatalogInstallError =
  PostMcpServerApiMcpServerCatalogInstallErrors[keyof PostMcpServerApiMcpServerCatalogInstallErrors];

export type PostMcpServerApiMcpServerCatalogInstallResponses = {
  /**
   * Default Response
   */
  200: {
    success?: boolean;
  };
};

export type PostMcpServerApiMcpServerCatalogInstallResponse =
  PostMcpServerApiMcpServerCatalogInstallResponses[keyof PostMcpServerApiMcpServerCatalogInstallResponses];

export type PostMcpServerApiMcpServerStartOauthData = {
  body: {
    mcp_connector_id: string;
  };
  path?: never;
  query?: never;
  url: '/mcpServer/api/mcp_server/start_oauth';
};

export type PostMcpServerApiMcpServerStartOauthErrors = {
  /**
   * Default Response
   */
  400: {
    error?: string;
  };
  /**
   * Default Response
   */
  500: {
    error?: string;
  };
};

export type PostMcpServerApiMcpServerStartOauthError =
  PostMcpServerApiMcpServerStartOauthErrors[keyof PostMcpServerApiMcpServerStartOauthErrors];

export type PostMcpServerApiMcpServerStartOauthResponses = {
  /**
   * Default Response
   */
  200: {
    auth_url?: string;
  };
};

export type PostMcpServerApiMcpServerStartOauthResponse =
  PostMcpServerApiMcpServerStartOauthResponses[keyof PostMcpServerApiMcpServerStartOauthResponses];

export type DeleteMcpServerApiMcpServerByMcpServerNameData = {
  body?: never;
  path: {
    mcp_server_name: string;
  };
  query?: never;
  url: '/mcpServer/api/mcp_server/{mcp_server_name}';
};

export type DeleteMcpServerApiMcpServerByMcpServerNameErrors = {
  /**
   * Default Response
   */
  400: {
    error?: string;
  };
  /**
   * Default Response
   */
  500: {
    error?: string;
  };
};

export type DeleteMcpServerApiMcpServerByMcpServerNameError =
  DeleteMcpServerApiMcpServerByMcpServerNameErrors[keyof DeleteMcpServerApiMcpServerByMcpServerNameErrors];

export type DeleteMcpServerApiMcpServerByMcpServerNameResponses = {
  /**
   * Default Response
   */
  200: {
    success?: boolean;
  };
};

export type DeleteMcpServerApiMcpServerByMcpServerNameResponse =
  DeleteMcpServerApiMcpServerByMcpServerNameResponses[keyof DeleteMcpServerApiMcpServerByMcpServerNameResponses];

export type DeleteOllamaLlmOllamaData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/ollama/llm/ollama/';
};

export type DeleteOllamaLlmOllamaResponses = {
  /**
   * Default Response
   */
  200: unknown;
};

export type GetOllamaLlmOllamaData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/ollama/llm/ollama/';
};

export type GetOllamaLlmOllamaResponses = {
  /**
   * Default Response
   */
  200: unknown;
};

export type HeadOllamaLlmOllamaData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/ollama/llm/ollama/';
};

export type HeadOllamaLlmOllamaResponses = {
  /**
   * Default Response
   */
  200: unknown;
};

export type OptionsOllamaLlmOllamaData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/ollama/llm/ollama/';
};

export type OptionsOllamaLlmOllamaResponses = {
  /**
   * Default Response
   */
  200: unknown;
};

export type PatchOllamaLlmOllamaData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/ollama/llm/ollama/';
};

export type PatchOllamaLlmOllamaResponses = {
  /**
   * Default Response
   */
  200: unknown;
};

export type PostOllamaLlmOllamaData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/ollama/llm/ollama/';
};

export type PostOllamaLlmOllamaResponses = {
  /**
   * Default Response
   */
  200: unknown;
};

export type PutOllamaLlmOllamaData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/ollama/llm/ollama/';
};

export type PutOllamaLlmOllamaResponses = {
  /**
   * Default Response
   */
  200: unknown;
};

export type DeleteOllamaLlmOllamaBy__Data = {
  body?: never;
  path: {
    '*': string;
  };
  query?: never;
  url: '/ollama/llm/ollama/{*}';
};

export type DeleteOllamaLlmOllamaBy__Responses = {
  /**
   * Default Response
   */
  200: unknown;
};

export type GetOllamaLlmOllamaBy__Data = {
  body?: never;
  path: {
    '*': string;
  };
  query?: never;
  url: '/ollama/llm/ollama/{*}';
};

export type GetOllamaLlmOllamaBy__Responses = {
  /**
   * Default Response
   */
  200: unknown;
};

export type HeadOllamaLlmOllamaBy__Data = {
  body?: never;
  path: {
    '*': string;
  };
  query?: never;
  url: '/ollama/llm/ollama/{*}';
};

export type HeadOllamaLlmOllamaBy__Responses = {
  /**
   * Default Response
   */
  200: unknown;
};

export type OptionsOllamaLlmOllamaBy__Data = {
  body?: never;
  path: {
    '*': string;
  };
  query?: never;
  url: '/ollama/llm/ollama/{*}';
};

export type OptionsOllamaLlmOllamaBy__Responses = {
  /**
   * Default Response
   */
  200: unknown;
};

export type PatchOllamaLlmOllamaBy__Data = {
  body?: never;
  path: {
    '*': string;
  };
  query?: never;
  url: '/ollama/llm/ollama/{*}';
};

export type PatchOllamaLlmOllamaBy__Responses = {
  /**
   * Default Response
   */
  200: unknown;
};

export type PostOllamaLlmOllamaBy__Data = {
  body?: never;
  path: {
    '*': string;
  };
  query?: never;
  url: '/ollama/llm/ollama/{*}';
};

export type PostOllamaLlmOllamaBy__Responses = {
  /**
   * Default Response
   */
  200: unknown;
};

export type PutOllamaLlmOllamaBy__Data = {
  body?: never;
  path: {
    '*': string;
  };
  query?: never;
  url: '/ollama/llm/ollama/{*}';
};

export type PutOllamaLlmOllamaBy__Responses = {
  /**
   * Default Response
   */
  200: unknown;
};

export type ClientOptions = {
  baseUrl: `${string}://${string}` | (string & {});
};
