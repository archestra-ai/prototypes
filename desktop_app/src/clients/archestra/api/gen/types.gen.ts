// This file is auto-generated by @hey-api/openapi-ts

export type ChatWithMessagesInput = {
  id: number;
  sessionId: string;
  title: string | null;
  createdAt: string;
  updatedAt: string;
  messages: Array<{
    id: string;
    chatId: number;
    role: 'user' | 'assistant' | 'system';
    content:
      | (string | number | boolean | null)
      | {
          [key: string]: unknown;
        }
      | Array<unknown>;
    createdAt: string;
  }>;
};

export type CloudProviderWithConfigInput = {
  type: SupportedCloudProvidersInput;
  name: string;
  apiKeyUrl: string;
  apiKeyPlaceholder: string;
  baseUrl: string;
  models: Array<string>;
  headers?: {
    [key: string]: string;
  };
  configured: boolean;
  enabled: boolean;
  validatedAt: string | null;
};

export type SupportedCloudProvidersInput = 'anthropic' | 'openai' | 'deepseek' | 'gemini';

export type SupportedCloudProviderModelInput = {
  id: string;
  provider: SupportedCloudProvidersInput;
};

export type ExternalMcpClientInput = {
  clientName: string;
  createdAt: string;
};

export type ExternalMcpClientNameInput = 'claude' | 'cursor' | 'vscode';

export type McpRequestLogInput = {
  id: number;
  requestId: string;
  sessionId: string | null;
  mcpSessionId: string | null;
  serverName: string;
  clientInfo: {
    userAgent?: string;
    clientName?: string;
    clientVersion?: string;
    clientPlatform?: string;
  };
  method: string | null;
  requestHeaders:
    | (string | number | boolean | null)
    | {
        [key: string]: unknown;
      }
    | Array<unknown>;
  requestBody: string | null;
  responseBody: string | null;
  responseHeaders:
    | (string | number | boolean | null)
    | {
        [key: string]: unknown;
      }
    | Array<unknown>;
  statusCode: number;
  errorMessage: string | null;
  durationMs: number | null;
  timestamp: string;
};

export type McpRequestLogStatsInput = {
  totalRequests: number;
  successCount: number;
  errorCount: number;
  avgDurationMs: number;
  requestsPerServer: {
    [key: string]: number;
  };
};

export type McpRequestLogFilterStatusInput = 'HTTP 200' | 'HTTP 40x' | 'HTTP 50x';

export type McpServerInput = {
  id: string;
  name: string | null;
  serverConfig: {
    command: string;
    args?: Array<string>;
    env?: {
      [key: string]: string;
    };
  };
  userConfigValues: {
    [key: string]: string | number | boolean | Array<string>;
  };
  createdAt: string;
};

export type McpServerContainerLogsInput = {
  logs: string;
  containerName: string;
  logFilePath: string;
};

export type PodmanMachineStatusInput = 'not_installed' | 'stopped' | 'running' | 'initializing';

export type ChatWithMessages = {
  id: number;
  sessionId: string;
  title: string | null;
  createdAt: string;
  updatedAt: string;
  messages: Array<{
    id: string;
    chatId: number;
    role: 'user' | 'assistant' | 'system';
    content:
      | (string | number | boolean | null)
      | {
          [key: string]: unknown;
        }
      | Array<unknown>;
    createdAt: string;
  }>;
};

export type CloudProviderWithConfig = {
  type: SupportedCloudProviders;
  name: string;
  apiKeyUrl: string;
  apiKeyPlaceholder: string;
  baseUrl: string;
  models: Array<string>;
  headers?: {
    [key: string]: string;
  };
  configured: boolean;
  enabled: boolean;
  validatedAt: string | null;
};

export type SupportedCloudProviders = 'anthropic' | 'openai' | 'deepseek' | 'gemini';

export type SupportedCloudProviderModel = {
  id: string;
  provider: SupportedCloudProviders;
};

export type ExternalMcpClient = {
  clientName: string;
  createdAt: string;
};

export type ExternalMcpClientName = 'claude' | 'cursor' | 'vscode';

export type McpRequestLog = {
  id: number;
  requestId: string;
  sessionId: string | null;
  mcpSessionId: string | null;
  serverName: string;
  clientInfo: {
    userAgent?: string;
    clientName?: string;
    clientVersion?: string;
    clientPlatform?: string;
  };
  method: string | null;
  requestHeaders:
    | (string | number | boolean | null)
    | {
        [key: string]: unknown;
      }
    | Array<unknown>;
  requestBody: string | null;
  responseBody: string | null;
  responseHeaders:
    | (string | number | boolean | null)
    | {
        [key: string]: unknown;
      }
    | Array<unknown>;
  statusCode: number;
  errorMessage: string | null;
  durationMs: number | null;
  timestamp: string;
};

export type McpRequestLogStats = {
  totalRequests: number;
  successCount: number;
  errorCount: number;
  avgDurationMs: number;
  requestsPerServer: {
    [key: string]: number;
  };
};

export type McpRequestLogFilterStatus = 'HTTP 200' | 'HTTP 40x' | 'HTTP 50x';

export type McpServer = {
  id: string;
  name: string | null;
  serverConfig: {
    command: string;
    args?: Array<string>;
    env?: {
      [key: string]: string;
    };
  };
  userConfigValues: {
    [key: string]: string | number | boolean | Array<string>;
  };
  createdAt: string;
};

export type McpServerContainerLogs = {
  logs: string;
  containerName: string;
  logFilePath: string;
};

export type PodmanMachineStatus = 'not_installed' | 'stopped' | 'running' | 'initializing';

export type GetChatsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/chat';
};

export type GetChatsResponses = {
  /**
   * Default Response
   */
  200: Array<ChatWithMessages>;
};

export type GetChatsResponse = GetChatsResponses[keyof GetChatsResponses];

export type CreateChatData = {
  body?: {
    [key: string]: unknown;
  };
  path?: never;
  query?: never;
  url: '/api/chat';
};

export type CreateChatResponses = {
  /**
   * Default Response
   */
  201: ChatWithMessages;
};

export type CreateChatResponse = CreateChatResponses[keyof CreateChatResponses];

export type DeleteChatData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/chat/{id}';
};

export type DeleteChatErrors = {
  /**
   * Default Response
   */
  404: {
    error: string;
  };
};

export type DeleteChatError = DeleteChatErrors[keyof DeleteChatErrors];

export type DeleteChatResponses = {
  /**
   * Default Response
   */
  204: void;
};

export type DeleteChatResponse = DeleteChatResponses[keyof DeleteChatResponses];

export type GetChatByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/chat/{id}';
};

export type GetChatByIdErrors = {
  /**
   * Default Response
   */
  404: {
    error: string;
  };
};

export type GetChatByIdError = GetChatByIdErrors[keyof GetChatByIdErrors];

export type GetChatByIdResponses = {
  /**
   * Default Response
   */
  200: ChatWithMessages;
};

export type GetChatByIdResponse = GetChatByIdResponses[keyof GetChatByIdResponses];

export type UpdateChatData = {
  body?: {
    title?: string | null;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/api/chat/{id}';
};

export type UpdateChatErrors = {
  /**
   * Default Response
   */
  404: {
    error: string;
  };
};

export type UpdateChatError = UpdateChatErrors[keyof UpdateChatErrors];

export type UpdateChatResponses = {
  /**
   * Default Response
   */
  200: ChatWithMessages;
};

export type UpdateChatResponse = UpdateChatResponses[keyof UpdateChatResponses];

export type GetAvailableCloudProvidersData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/cloud-providers/available';
};

export type GetAvailableCloudProvidersResponses = {
  /**
   * Default Response
   */
  200: Array<CloudProviderWithConfig>;
};

export type GetAvailableCloudProvidersResponse =
  GetAvailableCloudProvidersResponses[keyof GetAvailableCloudProvidersResponses];

export type ConfigureCloudProviderData = {
  body: {
    type: SupportedCloudProvidersInput;
    apiKey: string;
  };
  path?: never;
  query?: never;
  url: '/api/cloud-providers';
};

export type ConfigureCloudProviderResponses = {
  /**
   * Default Response
   */
  200: {
    success: boolean;
  };
};

export type ConfigureCloudProviderResponse = ConfigureCloudProviderResponses[keyof ConfigureCloudProviderResponses];

export type DeleteCloudProviderData = {
  body?: never;
  path: {
    type: SupportedCloudProvidersInput;
  };
  query?: never;
  url: '/api/cloud-providers/{type}';
};

export type DeleteCloudProviderResponses = {
  /**
   * Default Response
   */
  200: {
    success: boolean;
  };
};

export type DeleteCloudProviderResponse = DeleteCloudProviderResponses[keyof DeleteCloudProviderResponses];

export type GetCloudProviderModelsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/cloud-providers/models';
};

export type GetCloudProviderModelsResponses = {
  /**
   * Default Response
   */
  200: Array<SupportedCloudProviderModel>;
};

export type GetCloudProviderModelsResponse = GetCloudProviderModelsResponses[keyof GetCloudProviderModelsResponses];

export type GetConnectedExternalMcpClientsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/external_mcp_client';
};

export type GetConnectedExternalMcpClientsResponses = {
  /**
   * Default Response
   */
  200: Array<ExternalMcpClient>;
};

export type GetConnectedExternalMcpClientsResponse =
  GetConnectedExternalMcpClientsResponses[keyof GetConnectedExternalMcpClientsResponses];

export type GetSupportedExternalMcpClientsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/external_mcp_client/supported';
};

export type GetSupportedExternalMcpClientsResponses = {
  /**
   * Default Response
   */
  200: Array<ExternalMcpClientName>;
};

export type GetSupportedExternalMcpClientsResponse =
  GetSupportedExternalMcpClientsResponses[keyof GetSupportedExternalMcpClientsResponses];

export type ConnectExternalMcpClientData = {
  body: {
    clientName: ExternalMcpClientNameInput;
  };
  path?: never;
  query?: never;
  url: '/api/external_mcp_client/connect';
};

export type ConnectExternalMcpClientResponses = {
  /**
   * Default Response
   */
  200: {
    success: boolean;
  };
};

export type ConnectExternalMcpClientResponse =
  ConnectExternalMcpClientResponses[keyof ConnectExternalMcpClientResponses];

export type DisconnectExternalMcpClientData = {
  body?: never;
  path: {
    clientName: ExternalMcpClientNameInput;
  };
  query?: never;
  url: '/api/external_mcp_client/{clientName}/disconnect';
};

export type DisconnectExternalMcpClientResponses = {
  /**
   * Default Response
   */
  200: {
    success: boolean;
  };
};

export type DisconnectExternalMcpClientResponse =
  DisconnectExternalMcpClientResponses[keyof DisconnectExternalMcpClientResponses];

export type ClearMcpRequestLogsData = {
  body: {
    clearAll: boolean;
  };
  path?: never;
  query?: never;
  url: '/api/mcp_request_log';
};

export type ClearMcpRequestLogsResponses = {
  /**
   * Default Response
   */
  200: {
    cleared: number;
  };
};

export type ClearMcpRequestLogsResponse = ClearMcpRequestLogsResponses[keyof ClearMcpRequestLogsResponses];

export type GetMcpRequestLogsData = {
  body?: never;
  path?: never;
  query?: {
    mcpSessionId?: string;
    serverName?: string;
    method?: string;
    status?: McpRequestLogFilterStatusInput;
    search?: string;
    dateFrom?: string;
    dateTo?: string;
    page?: number;
    pageSize?: number;
  };
  url: '/api/mcp_request_log';
};

export type GetMcpRequestLogsResponses = {
  /**
   * Default Response
   */
  200: {
    data: Array<McpRequestLog>;
    total: number;
    page: number;
    pageSize: number;
  };
};

export type GetMcpRequestLogsResponse = GetMcpRequestLogsResponses[keyof GetMcpRequestLogsResponses];

export type GetMcpRequestLogByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/mcp_request_log/{id}';
};

export type GetMcpRequestLogByIdErrors = {
  /**
   * Default Response
   */
  404: {
    error: string;
  };
};

export type GetMcpRequestLogByIdError = GetMcpRequestLogByIdErrors[keyof GetMcpRequestLogByIdErrors];

export type GetMcpRequestLogByIdResponses = {
  /**
   * Default Response
   */
  200: McpRequestLog;
};

export type GetMcpRequestLogByIdResponse = GetMcpRequestLogByIdResponses[keyof GetMcpRequestLogByIdResponses];

export type GetMcpRequestLogStatsData = {
  body?: never;
  path?: never;
  query?: {
    mcpSessionId?: string;
    serverName?: string;
    method?: string;
    status?: McpRequestLogFilterStatusInput;
    search?: string;
    dateFrom?: string;
    dateTo?: string;
  };
  url: '/api/mcp_request_log/stats';
};

export type GetMcpRequestLogStatsResponses = {
  /**
   * Default Response
   */
  200: McpRequestLogStats;
};

export type GetMcpRequestLogStatsResponse = GetMcpRequestLogStatsResponses[keyof GetMcpRequestLogStatsResponses];

export type GetMcpServersData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/mcp_server';
};

export type GetMcpServersResponses = {
  /**
   * Default Response
   */
  200: Array<McpServer>;
};

export type GetMcpServersResponse = GetMcpServersResponses[keyof GetMcpServersResponses];

export type InstallMcpServerData = {
  body: {
    catalogName: string;
    userConfigValues: {
      [key: string]: string | number | boolean | Array<string>;
    };
  };
  path?: never;
  query?: never;
  url: '/api/mcp_server/install';
};

export type InstallMcpServerErrors = {
  /**
   * Default Response
   */
  400: {
    error: string;
  };
  /**
   * Default Response
   */
  404: {
    error: string;
  };
  /**
   * Default Response
   */
  500: {
    error: string;
  };
};

export type InstallMcpServerError = InstallMcpServerErrors[keyof InstallMcpServerErrors];

export type InstallMcpServerResponses = {
  /**
   * Default Response
   */
  200: McpServer;
};

export type InstallMcpServerResponse = InstallMcpServerResponses[keyof InstallMcpServerResponses];

export type InstallCustomMcpServerData = {
  body: {
    name: string;
    serverConfig: {
      command: string;
      args?: Array<string>;
      env?: {
        [key: string]: string;
      };
    };
  };
  path?: never;
  query?: never;
  url: '/api/mcp_server/install_custom';
};

export type InstallCustomMcpServerResponses = {
  /**
   * Default Response
   */
  200: McpServer;
};

export type InstallCustomMcpServerResponse = InstallCustomMcpServerResponses[keyof InstallCustomMcpServerResponses];

export type UninstallMcpServerData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/mcp_server/{id}';
};

export type UninstallMcpServerResponses = {
  /**
   * Default Response
   */
  200: {
    success: boolean;
  };
};

export type UninstallMcpServerResponse = UninstallMcpServerResponses[keyof UninstallMcpServerResponses];

export type StartMcpServerOauthData = {
  body: {
    catalogName: string;
  };
  path?: never;
  query?: never;
  url: '/api/mcp_server/start_oauth';
};

export type StartMcpServerOauthResponses = {
  /**
   * Default Response
   */
  200: {
    authUrl: string;
  };
};

export type StartMcpServerOauthResponse = StartMcpServerOauthResponses[keyof StartMcpServerOauthResponses];

export type GetMcpServerLogsData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    lines?: number;
  };
  url: '/mcp_proxy/{id}/logs';
};

export type GetMcpServerLogsErrors = {
  /**
   * Default Response
   */
  404: {
    error: string;
  };
};

export type GetMcpServerLogsError = GetMcpServerLogsErrors[keyof GetMcpServerLogsErrors];

export type GetMcpServerLogsResponses = {
  /**
   * Default Response
   */
  200: McpServerContainerLogs;
};

export type GetMcpServerLogsResponse = GetMcpServerLogsResponses[keyof GetMcpServerLogsResponses];

export type GetSandboxStatusData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/sandbox/status';
};

export type GetSandboxStatusResponses = {
  /**
   * Default Response
   */
  200: {
    isInitialized: boolean;
    podmanMachineStatus: PodmanMachineStatus;
  };
};

export type GetSandboxStatusResponse = GetSandboxStatusResponses[keyof GetSandboxStatusResponses];

export type ClientOptions = {
  baseUrl: `${string}://${string}` | (string & {});
};
