// This file is auto-generated by @hey-api/openapi-ts
import type { Client, Options as ClientOptions, TDataShape } from './client';
import { client as _heyApiClient } from './client.gen';
import type {
  GetBadgeQualityByOrgByRepoData,
  GetBadgeQualityByOrgByRepoErrors,
  GetBadgeQualityByOrgByRepoResponses,
  GetSearchData,
  GetSearchResponses,
  GetServerByNameData,
  GetServerByNameErrors,
  GetServerByNameResponses,
} from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<
  TData,
  ThrowOnError
> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Search MCP servers
 * Search for MCP servers with filtering and sorting options
 */
export const getSearch = <ThrowOnError extends boolean = false>(options?: Options<GetSearchData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetSearchResponses, unknown, ThrowOnError>({
    url: '/search',
    ...options,
  });
};

/**
 * Get MCP server by name
 * Retrieve detailed information about a specific MCP server by its name identifier
 */
export const getServerByName = <ThrowOnError extends boolean = false>(
  options: Options<GetServerByNameData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<GetServerByNameResponses, GetServerByNameErrors, ThrowOnError>({
    url: '/server/{name}',
    ...options,
  });
};

/**
 * Get quality badge
 * Get an SVG quality badge for an MCP server
 */
export const getBadgeQualityByOrgByRepo = <ThrowOnError extends boolean = false>(
  options: Options<GetBadgeQualityByOrgByRepoData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetBadgeQualityByOrgByRepoResponses,
    GetBadgeQualityByOrgByRepoErrors,
    ThrowOnError
  >({
    url: '/badge/quality/{org}/{repo}',
    ...options,
  });
};
