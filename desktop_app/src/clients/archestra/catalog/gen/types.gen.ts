// This file is auto-generated by @hey-api/openapi-ts

/**
 * MCP Server information
 */
export type McpServer = {
  /**
   * Unique identifier for the server
   */
  slug: string;
  /**
   * Display name of the server
   */
  name: string;
  /**
   * Brief description of the server's functionality
   */
  description: string;
  /**
   * Server category
   */
  category?: string | null;
  /**
   * Trust score based on various metrics
   */
  qualityScore?: number | null;
  /**
   * GitHub organization name
   */
  gitHubOrg: string;
  /**
   * GitHub repository name
   */
  gitHubRepo: string;
  /**
   * Path within the repository where the server is located
   */
  repositoryPath?: string | null;
  /**
   * Primary programming language
   */
  programmingLanguage: string;
  /**
   * Number of GitHub stars
   */
  gh_stars?: number;
  /**
   * Number of contributors
   */
  gh_contributors?: number;
  /**
   * Number of open issues
   */
  gh_issues?: number;
  /**
   * Whether the repository has releases
   */
  gh_releases?: boolean;
  /**
   * Whether CI/CD is configured
   */
  gh_ci_cd?: boolean;
  /**
   * Configuration for MCP clients
   */
  configForClients?: {
    mcpServers?: {
      [key: string]: {
        command: string;
        args?: Array<string>;
        env?: {
          [key: string]: string;
        };
      };
    };
  } | null;
  /**
   * Configuration specific to Archestra
   */
  configForArchestra?: {
    command: string;
    args?: Array<string>;
    env: {
      [key: string]: string;
    };
    transport: 'http' | 'stdio';
    oauth?: {
      provider: string;
      required: boolean;
    };
  } | null;
};

export type GetSearchData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Search query to filter by name, description, or repository
     */
    q?: string;
    /**
     * Filter by category
     */
    category?:
      | 'Aggregators'
      | 'Art & Culture'
      | 'Healthcare'
      | 'Browser Automation'
      | 'Cloud'
      | 'Development'
      | 'CLI Tools'
      | 'Communication'
      | 'Data'
      | 'Logistics'
      | 'Data Science'
      | 'IoT'
      | 'File Management'
      | 'Finance'
      | 'Gaming'
      | 'Knowledge'
      | 'Location'
      | 'Marketing'
      | 'Monitoring'
      | 'Media'
      | 'AI Tools'
      | 'Search'
      | 'Security'
      | 'Social Media'
      | 'Sports'
      | 'Support'
      | 'Translation'
      | 'Audio'
      | 'Travel'
      | 'Productivity'
      | 'Utilities';
    /**
     * Filter by programming language
     */
    language?: string;
    /**
     * Sort results by field
     */
    sortBy?: 'quality' | 'stars' | 'name';
    /**
     * Number of results to return
     */
    limit?: number;
    /**
     * Number of results to skip
     */
    offset?: number;
  };
  url: '/search';
};

export type GetSearchResponses = {
  /**
   * Successful response
   */
  200: {
    servers?: Array<McpServer>;
    totalCount?: number;
    limit?: number;
    offset?: number;
    hasMore?: boolean;
  };
};

export type GetSearchResponse = GetSearchResponses[keyof GetSearchResponses];

export type GetServerBySlugData = {
  body?: never;
  path: {
    /**
     * Server slug identifier (format - org__repo or org__repo__path)
     */
    slug: string;
  };
  query?: never;
  url: '/server/{slug}';
};

export type GetServerBySlugErrors = {
  /**
   * Server not found
   */
  404: {
    error?: string;
  };
};

export type GetServerBySlugError = GetServerBySlugErrors[keyof GetServerBySlugErrors];

export type GetServerBySlugResponses = {
  /**
   * Successful response
   */
  200: McpServer & {
    scoreBreakdown?: {
      /**
       * Points for MCP protocol implementation (max 60)
       */
      mcpProtocol?: number;
      /**
       * Points for GitHub community metrics (max 20)
       */
      githubMetrics?: number;
      /**
       * Points for CI/CD and releases (max 10)
       */
      deploymentMaturity?: number;
      /**
       * Points for README quality (max 8)
       */
      documentation?: number;
      /**
       * Points for displaying quality badge (max 2)
       */
      badgeUsage?: number;
      /**
       * Total trust score (max 100)
       */
      total?: number;
    };
    /**
     * Direct link to GitHub repository
     */
    githubUrl?: string;
    /**
     * URL for the quality badge SVG
     */
    badgeUrl?: string;
    /**
     * URL to the server's detail page on MCP Catalog
     */
    detailPageUrl?: string;
  };
};

export type GetServerBySlugResponse = GetServerBySlugResponses[keyof GetServerBySlugResponses];

export type GetBadgeQualityByOrgByRepoData = {
  body?: never;
  path: {
    /**
     * GitHub organization
     */
    org: string;
    /**
     * GitHub repository name
     */
    repo: string;
  };
  query?: never;
  url: '/badge/quality/{org}/{repo}';
};

export type GetBadgeQualityByOrgByRepoResponses = {
  /**
   * SVG badge image
   */
  200: Blob | File;
};

export type GetBadgeQualityByOrgByRepoResponse =
  GetBadgeQualityByOrgByRepoResponses[keyof GetBadgeQualityByOrgByRepoResponses];

export type GetBadgeQualityByOrgByRepoByPathData = {
  body?: never;
  path: {
    /**
     * GitHub organization
     */
    org: string;
    /**
     * GitHub repository name
     */
    repo: string;
    /**
     * Repository sub-path (use -- instead of /)
     */
    path: string;
  };
  query?: never;
  url: '/badge/quality/{org}/{repo}/{path}';
};

export type GetBadgeQualityByOrgByRepoByPathResponses = {
  /**
   * SVG badge image
   */
  200: Blob | File;
};

export type GetBadgeQualityByOrgByRepoByPathResponse =
  GetBadgeQualityByOrgByRepoByPathResponses[keyof GetBadgeQualityByOrgByRepoByPathResponses];

export type ClientOptions = {
  baseUrl: `${string}://${string}/mcp-catalog/api` | (string & {});
};
