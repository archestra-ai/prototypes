// This file is auto-generated by @hey-api/openapi-ts

export type ArchestraMcpServerManifest = {
  $schema?: string;
  dxt_version: string;
  name: string;
  display_name?: string;
  version: string;
  description: string;
  long_description?: string;
  author: {
    name: string;
    email?: string;
    url?: string;
  };
  repository?: {
    type: string;
    url: string;
  };
  homepage?: string;
  documentation?: string;
  support?: string;
  icon?: string;
  screenshots?: Array<string>;
  server: {
    type: 'python' | 'node' | 'binary';
    entry_point: string;
    mcp_config: {
      command: string;
      args?: Array<string>;
      env?: {
        [key: string]: string;
      };
      platform_overrides?: {
        [key: string]: {
          command?: string;
          args?: Array<string>;
          env?: {
            [key: string]: string;
          };
        };
      };
    };
  };
  tools?: Array<{
    name: string;
    description?: string;
  }>;
  tools_generated?: boolean;
  prompts?: Array<{
    name: string;
    description?: string;
    arguments?: Array<string>;
    text: string;
  }>;
  prompts_generated?: boolean;
  keywords?: Array<string>;
  license?: string;
  compatibility?: {
    claude_desktop?: string;
    platforms?: Array<'darwin' | 'win32' | 'linux'>;
    runtimes?: {
      python?: string;
      node?: string;
    };
  };
  user_config?: {
    [key: string]: {
      type: 'string' | 'number' | 'boolean' | 'directory' | 'file';
      title: string;
      description: string;
      required?: boolean;
      default?: string | number | boolean | Array<string>;
      multiple?: boolean;
      sensitive?: boolean;
      min?: number;
      max?: number;
    };
  };
  readme: string | null;
  category:
    | 'Aggregators'
    | 'Art & Culture'
    | 'Healthcare'
    | 'Browser Automation'
    | 'Cloud'
    | 'Development'
    | 'CLI Tools'
    | 'Communication'
    | 'Data'
    | 'Logistics'
    | 'Data Science'
    | 'IoT'
    | 'File Management'
    | 'Finance'
    | 'Gaming'
    | 'Knowledge'
    | 'Location'
    | 'Marketing'
    | 'Monitoring'
    | 'Media'
    | 'AI Tools'
    | 'Search'
    | 'Security'
    | 'Social Media'
    | 'Sports'
    | 'Support'
    | 'Translation'
    | 'Audio'
    | 'Travel'
    | 'Messengers'
    | 'Email'
    | 'CRM'
    | 'Enterprise'
    | 'Job Search'
    | 'Local files'
    | 'General';
  quality_score: number | null;
  config_for_archestra: {
    oauth: {
      provider: string;
      required: boolean;
    };
  };
  github_info: {
    owner: string;
    repo: string;
    url: string;
    name: string;
    path: string | null;
    stars: number;
    contributors: number;
    issues: number;
    releases: boolean;
    ci_cd: boolean;
    latest_commit_hash: string | null;
  };
  programming_language: string;
  framework: string | null;
  last_scraped_at: string | null;
  evaluation_model: string | null;
  protocol_features: {
    implementing_tools: boolean;
    implementing_prompts: boolean;
    implementing_resources: boolean;
    implementing_sampling: boolean;
    implementing_roots: boolean;
    implementing_logging: boolean;
    implementing_stdio: boolean;
    implementing_streamable_http: boolean;
    implementing_oauth2: boolean;
  };
  dependencies: Array<{
    name: string;
    importance: number;
  }>;
  raw_dependencies: string | null;
};

export type ArchestraMcpServerManifestWithScoreBreakdown = ArchestraMcpServerManifest & {
  score_breakdown: {
    mcp_protocol: number;
    github_metrics: number;
    deployment_maturity: number;
    documentation: number;
    dependencies: number;
    badge_usage: number;
    total: number;
  };
};

export type GetSearchData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Search query to filter by name, description, or repository
     */
    q?: string;
    /**
     * Filter by category
     */
    category?:
      | 'Aggregators'
      | 'Art & Culture'
      | 'Healthcare'
      | 'Browser Automation'
      | 'Cloud'
      | 'Development'
      | 'CLI Tools'
      | 'Communication'
      | 'Data'
      | 'Logistics'
      | 'Data Science'
      | 'IoT'
      | 'File Management'
      | 'Finance'
      | 'Gaming'
      | 'Knowledge'
      | 'Location'
      | 'Marketing'
      | 'Monitoring'
      | 'Media'
      | 'AI Tools'
      | 'Search'
      | 'Security'
      | 'Social Media'
      | 'Sports'
      | 'Support'
      | 'Translation'
      | 'Audio'
      | 'Travel'
      | 'Messengers'
      | 'Email'
      | 'CRM'
      | 'Enterprise'
      | 'Job Search'
      | 'Local files'
      | 'General';
    /**
     * Filter by programming language
     */
    language?: string;
    /**
     * Sort results by field
     */
    sortBy?: 'quality' | 'stars' | 'name';
    /**
     * Number of results to return
     */
    limit?: number;
    /**
     * Number of results to skip
     */
    offset?: number;
  };
  url: '/search';
};

export type GetSearchResponses = {
  /**
   * Successful response
   */
  200: {
    servers?: Array<ArchestraMcpServerManifest>;
    totalCount?: number;
    limit?: number;
    offset?: number;
    hasMore?: boolean;
  };
};

export type GetSearchResponse = GetSearchResponses[keyof GetSearchResponses];

export type GetServerByNameData = {
  body?: never;
  path: {
    /**
     * Server name identifier (format - org__repo or org__repo__path)
     */
    name: string;
  };
  query?: never;
  url: '/server/{name}';
};

export type GetServerByNameErrors = {
  /**
   * Server not found
   */
  404: {
    error?: string;
  };
};

export type GetServerByNameError = GetServerByNameErrors[keyof GetServerByNameErrors];

export type GetServerByNameResponses = {
  /**
   * Successful response
   */
  200: ArchestraMcpServerManifestWithScoreBreakdown;
};

export type GetServerByNameResponse = GetServerByNameResponses[keyof GetServerByNameResponses];

export type GetBadgeQualityByOrgByRepoData = {
  body?: never;
  path: {
    /**
     * GitHub organization
     */
    org: string;
    /**
     * GitHub repository name
     */
    repo: string;
  };
  query?: never;
  url: '/badge/quality/{org}/{repo}';
};

export type GetBadgeQualityByOrgByRepoErrors = {
  /**
   * Server not found
   */
  404: {
    error?: string;
  };
};

export type GetBadgeQualityByOrgByRepoError = GetBadgeQualityByOrgByRepoErrors[keyof GetBadgeQualityByOrgByRepoErrors];

export type GetBadgeQualityByOrgByRepoResponses = {
  /**
   * SVG image content
   */
  200: Blob | File;
};

export type GetBadgeQualityByOrgByRepoResponse =
  GetBadgeQualityByOrgByRepoResponses[keyof GetBadgeQualityByOrgByRepoResponses];

export type ClientOptions = {
  baseUrl: `${string}://${string}/mcp-catalog/api` | (string & {});
};
